<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadowless</title>
  
  <subtitle>备忘录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shadowless.top/"/>
  <updated>2018-06-17T15:47:23.953Z</updated>
  <id>http://shadowless.top/</id>
  
  <author>
    <name>Shadowless</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python日志模块logging使用介绍</title>
    <link href="http://shadowless.top/python/python%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97logging%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://shadowless.top/python/python日志模块logging使用介绍/</id>
    <published>2018-06-16T16:25:58.000Z</published>
    <updated>2018-06-17T15:47:23.953Z</updated>
    
    <content type="html"><![CDATA[<p>在平时编写Python脚本时，需要调试就加<code>print</code>打印出来观察，这种操作在写一些简单的脚本时是迅速有效的。但是当进行复杂的应用开发时，这样调试就显得力不从心。所以我们需要使用Python标准库中的<code>logging</code>模块，该模块可以定义日志格式，设置过滤信息，选择日志输出位置（文件、标准错误输出、网络等等）。</p><h1 id="使用基本的logging配置"><a href="#使用基本的logging配置" class="headerlink" title="使用基本的logging配置"></a>使用基本的logging配置</h1><p>在一般使用过程中，我们需要按照事件的严重程度将日志划分不同等级，便于我们观察和定位。<br>logging内置的日志级别为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">"debug message"</span>)</span><br><span class="line">logging.info(<span class="string">"info message"</span>)</span><br><span class="line">logging.warning(<span class="string">"warning message"</span>)</span><br><span class="line">logging.error(<span class="string">"error message"</span>)</span><br><span class="line">logging.critical(<span class="string">"critical message"</span>)</span><br></pre></td></tr></table></figure></p><p>日志级别的数字值：</p><table><thead><tr><th>级别</th><th>数字值</th></tr></thead><tbody><tr><td>CRITICAL</td><td>50</td></tr><tr><td>ERROR</td><td>40</td></tr><tr><td>WARNING</td><td>30</td></tr><tr><td>INFO</td><td>20</td></tr><tr><td>DEBUG</td><td>10</td></tr><tr><td>NOTSET</td><td>0</td></tr></tbody></table><p><code>logging</code>模块中的还有以下几个概念，<code>Handler</code>，<code>Formater</code>，<code>Filter</code>，<code>Logger</code>。</p><ul><li><code>Handler</code>: 日志处理器。处理日志信息的输出位置。</li><li><code>Formater</code>：日志的格式化。设置日志的输出格式。</li><li><code>Filter</code>: 日志过滤器。为日志设置过滤条件。</li><li><code>Logger</code>： 日志记录器。在应用中使用该接口记录日志。</li></ul><p>首先我们开始最基本的日志配置：</p><ol><li>定义日志等级，在默认情况下，只有日志级别在WARNING及以上的信息才会被处理，所以我们需要设置适合的等级。</li><li>设置日志的输出格式</li><li>设置日志的输出位置</li></ol><p>以上三项设置，我们可以直接调用<code>logging</code>模块中的<code>basicConfig</code>方法，该方法会设置全局日志处理器root_handler,全局日志记录器root_logger,并依据制定参数设置Formater作为root_handler的格式化器。</p><a id="more"></a><p>使用方法：</p><figure class="highlight python"><figcaption><span>log_basic.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    format=<span class="string">"%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s"</span>,</span><br><span class="line">                    datefmt=<span class="string">"%a, %d %b %Y %H:%M:%S"</span>,</span><br><span class="line">                    filename=<span class="string">'parser_result.log'</span>,</span><br><span class="line">                    filemode=<span class="string">'w'</span></span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">"info message"</span>)</span><br><span class="line">logging.debug(<span class="string">"debug message"</span>)</span><br><span class="line">logging.warning(<span class="string">"warning message"</span>)</span><br><span class="line">logging.error(<span class="string">"error message"</span>)</span><br><span class="line">logging.critical(<span class="string">"critical message"</span>)</span><br></pre></td></tr></table></figure><p>按照上述参数我们可以在parser_result.log文件中获得以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sun, 17 Jun 2018 01:07:17 log_basic.py[line:10] INFO info message</span><br><span class="line">Sun, 17 Jun 2018 01:07:17 log_basic.py[line:12] WARNING warning message</span><br><span class="line">Sun, 17 Jun 2018 01:07:17 log_basic.py[line:13] ERROR error message</span><br><span class="line">Sun, 17 Jun 2018 01:07:17 log_basic.py[line:14] CRITICAL critical message</span><br></pre></td></tr></table></figure><p>如果需要将日志打印在终端上，我们可以修改上述例子:</p><figure class="highlight python"><figcaption><span>log_basic.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    format=<span class="string">"%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s"</span>,</span><br><span class="line">                    datefmt=<span class="string">"%a, %d %b %Y %H:%M:%S"</span>,</span><br><span class="line">                    stream=sys.stdout</span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">"info message"</span>)</span><br><span class="line">logging.debug(<span class="string">"debug message"</span>)</span><br><span class="line">logging.warning(<span class="string">"warning message"</span>)</span><br><span class="line">logging.error(<span class="string">"error message"</span>)</span><br><span class="line">logging.critical(<span class="string">"critical message"</span>)</span><br></pre></td></tr></table></figure><p>Basic的参数介绍如下<br><figure class="highlight bash"><figcaption><span>basicConfig参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">filename: 指定日志文件名;</span><br><span class="line">filemode: 和file函数意义相同，制定日志文件的打开模式，<span class="string">'w'</span> or <span class="string">'a'</span>;</span><br><span class="line">format: 指定输出的格式和内容.</span><br><span class="line">    %(levelno)s: 日志级别数值</span><br><span class="line">    %(levelname)s:日志级别名称</span><br><span class="line">    %(pathname)s:当前程序路径，sys.argv[0]</span><br><span class="line">    %(filename)s:当前执行程序名</span><br><span class="line">    %(funcName)s:日志的当前函数</span><br><span class="line">    %(lineno)s:当前行号</span><br><span class="line">    %(asctime)s:日志时间</span><br><span class="line">    %(thread)d:线程ID</span><br><span class="line">    %(threadName)s:线程名称</span><br><span class="line">    %(process)d:进程ID</span><br><span class="line">    %(message)s:日志信息</span><br><span class="line">datafmp: 指定时间格式，同time.strftime();</span><br><span class="line">level: 设置日志级别，默认logging.WARNNING;</span><br><span class="line">stream: 指定将日志的输出流，可以sys.stderr,sys.stdout或文件，默认sys.stderr,当filename也指定，stream被忽略；</span><br></pre></td></tr></table></figure></p><p>基本的设置使用logging.basic即可完成，后面介绍由Handler，Formater，Filter，Logger这些更细致的配置。</p><h1 id="日志记录器Logger的使用"><a href="#日志记录器Logger的使用" class="headerlink" title="日志记录器Logger的使用"></a>日志记录器Logger的使用</h1><p>Logger为logging模块中的日志记录器，主要执行三项工作：</p><ol><li>为程序提供日志记录的接口</li><li>判断日志所处级别，并判断是否需要过滤</li><li>根据日志级别将该条日志分别发给不同Handler</li></ol><p>常用的方法为：</p><ol><li><code>Logger.setLevel()</code>: 设置日志等级</li><li><code>Logger.addHandler()</code>: 添加一个<code>Handler</code></li><li><code>Logger.removeHandler()</code>: 删除一个<code>Handler</code></li><li><code>Logger.addFilter()</code>: 添加一个过滤器</li></ol><p>使用<code>Logger.getLogger()</code>可以获取一个<code>Logger</code>，如果未提供参数则获得<code>root Logger</code>。<br><code>logging.getLogger(&quot;APP&quot;)</code>获得一个名为APP的日志记录器<br><code>logging.getLogger(&quot;APP.run&quot;)</code>获得名为APP.run的记录器，该记录器为APP的子记录器</p><p>示例代码如下：<br><figure class="highlight python"><figcaption><span>logging_logger.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">()</span>:</span></span><br><span class="line">    app_logger = logging.getLogger(<span class="string">"APP"</span>)</span><br><span class="line">    app_logger.setLevel(logging.INFO)</span><br><span class="line">    app_formater = logging.Formatter(<span class="string">"%(name)s - %(asctime)s - %(filename)s: %(message)s"</span>)</span><br><span class="line">    app_handler = logging.StreamHandler(sys.stdout)</span><br><span class="line">    app_handler.setFormatter(app_formater)</span><br><span class="line">    app_logger.addHandler(app_handler)</span><br><span class="line"></span><br><span class="line">    app_logger.info(<span class="string">"APP config ..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    run_logger = logging.getLogger(<span class="string">"APP.run"</span>)</span><br><span class="line">    run_logger.setLevel(logging.INFO)</span><br><span class="line">    run_formater = logging.Formatter(<span class="string">"%(name)s - %(asctime)s - %(filename)s: %(message)s"</span>)</span><br><span class="line">    run_handler = logging.StreamHandler()</span><br><span class="line">    run_handler.setFormatter(run_formater)</span><br><span class="line">    run_logger.addHandler(run_handler)</span><br><span class="line">    </span><br><span class="line">    run_logger.info(<span class="string">"running now!"</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app()</span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>执行代码输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shadowless@shadowless-PC:$ python logging_logger.py</span><br><span class="line">APP - 2018-06-17 22:25:11,541 - logging_logger.py: APP config ...</span><br><span class="line">APP.run - 2018-06-17 22:25:11,542 - logging_logger.py: running now!</span><br><span class="line">APP.run - 2018-06-17 22:25:11,542 - logging_logger.py: running now!</span><br></pre></td></tr></table></figure><p>观察输出结果，为何会有两条<code>unning now</code>的打印，这是因为默认情况下，一个<code>logger</code>名为<code>propagate</code>属性，当该属性值为<code>True</code>则该<code>logger</code>的输出会朝着上一级传播，最终都会交给<code>root Logger</code>。<br>有如下解决方案：</p><ol><li>在创建logger时将<code>propagate</code>属性置为<code>False</code>。</li><li>将APP.run的Handler移除，全部日志都交给APP Logger的处理器去输出。</li></ol><p>一般情况下，为了使程序日志记录有调理，我们也可以将root Logger的日志等级设置成最高，或者移除其所有日志处理器。</p><h1 id="使用不同的Handler来处理日志的输出"><a href="#使用不同的Handler来处理日志的输出" class="headerlink" title="使用不同的Handler来处理日志的输出"></a>使用不同的Handler来处理日志的输出</h1><p>logging模块中内置的Handler有以下几种：</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>StreamHandler</td><td>日志输出到流，可以是sys.stderr或sys.stdout或文件</td></tr><tr><td>FileHandler</td><td>日志输出到文件</td></tr><tr><td>BaseRotatingHandler</td><td>基本的日志回滚方式</td></tr><tr><td>RotatingHandler</td><td>日志回滚方式，支持日志文件最大数量和日志文件回滚</td></tr><tr><td>TimeRotatingHandler</td><td>日志回滚方式，在一定时间区域回滚日志文件</td></tr><tr><td>SocketHandler</td><td>远程输出到TCP/IP sockets</td></tr><tr><td>DatagramHandler</td><td>远程输出日志到UDP socckets</td></tr><tr><td>SMTPHandler</td><td>远程输出日志到邮件地址</td></tr><tr><td>SysLogHandler</td><td>日志输出到syslog</td></tr><tr><td>NTEventLogHandler</td><td>远程输出日志到Windows NT/2000/XP的事件日志</td></tr><tr><td>MemoryHandler</td><td>日志输出到内存中的指定buffer</td></tr><tr><td>HTTPHandler</td><td>通过”get”,”post”远程输出到HTTP服务器</td></tr></tbody></table><h2 id="StreamHandler使用"><a href="#StreamHandler使用" class="headerlink" title="StreamHandler使用"></a>StreamHandler使用</h2><p>StreamHandler可以将日志输出到流。如标准输出流，标准错误输出流，文件等。<br>使用方法可以参考如下例子：</p><figure class="highlight python"><figcaption><span>logging_stream.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">console_logger = logging.getLogger()</span><br><span class="line">console_logger.setLevel(level=logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">"%(pathname)s - %(asctime)s - %(name)s - %(levelname)s - %(message)s"</span>)</span><br><span class="line">console_handler = logging.StreamHandler(sys.stderr)</span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">console_logger.info(<span class="string">"输出到命令行"</span>)</span><br></pre></td></tr></table></figure><h2 id="FileHandler使用"><a href="#FileHandler使用" class="headerlink" title="FileHandler使用"></a>FileHandler使用</h2><p>FileHandler可以将日志输出到文件。<br><figure class="highlight python"><figcaption><span>logging_file.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">file_logger = logging.getLogger()</span><br><span class="line">file_logger.setLevel(level=logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">"%(pathname)s - %(asctime)s - %(name)s - %(levelname)s - %(message)s"</span>)</span><br><span class="line">file_handler = logging.FileHanlder(<span class="string">"logging_file.log"</span>)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">file_logger.info(<span class="string">"输出到文件"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="RotatingFileHandler"><a href="#RotatingFileHandler" class="headerlink" title="RotatingFileHandler"></a>RotatingFileHandler</h2><figure class="highlight python"><figcaption><span>logging_rotatingfile.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">file_logger = logging.getLogger()</span><br><span class="line">file_logger.setLevel(level=logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">"%(pathname)s - %(asctime)s - %(name)s - %(levelname)s - %(message)s"</span>)</span><br><span class="line">file_handler = logging.handlers.RotatingFileHandler(<span class="string">"log/logging_file.log"</span>, maxBytes=<span class="number">1</span>*<span class="number">1024</span>, backupCount=<span class="number">3</span>)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">file_logger.info(<span class="string">"输出到文件,当日志达到1KB时将日志备份，总备份个数为3个，logging_file.log中始终为最新的日志"</span>)</span><br></pre></td></tr></table></figure><h1 id="使用Filter过滤器"><a href="#使用Filter过滤器" class="headerlink" title="使用Filter过滤器"></a>使用Filter过滤器</h1><blockquote><p>Handlers和Loggers可以使用Filters来完成比级别更复杂的过滤。Filter基类只允许特定Logger层次以下的事件。例如用‘A.B’初始化的Filter允许Logger ‘A.B’, ‘A.B.C’, ‘A.B.C.D’, ‘A.B.D’等记录的事件，logger‘A.BB’, ‘B.A.B’ 等就不行。 如果用空字符串来初始化，所有的事件都接受。<br>创建方法:  <code>filter = logging.Filter(name=&#39;&#39;)</code></p><p>概念总结：<br>熟悉了这些概念之后，有另外一个比较重要的事情必须清楚，即Logger是一个树形层级结构;<br>Logger可以包含一个或多个Handler和Filter，即Logger与Handler或Fitler是一对多的关系;<br>一个Logger实例可以新增多个Handler，一个Handler可以新增多个格式化器或多个过滤器，而且日志级别将会继承。</p><p><img src="/python日志模块logging使用介绍/20180617111350472.png" alt=""></p><footer><strong>python logging模块使用教程</strong><cite><a href="https://www.jianshu.com/p/feb86c06c4f4" target="_blank" rel="noopener">好吃的野菜</a></cite></footer></blockquote><p>示例，使用filter控制日志输出到log文件与控制台<br><figure class="highlight python"><figcaption><span>logging_filter.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextFilter</span><span class="params">(logging.Filter)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    这是一个控制日志记录的过滤器。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            filter_key = record.TASK</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> filter_key == <span class="string">"logToConsole"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建日志对象</span></span><br><span class="line">    logger = logging.getLogger(__name__)</span><br><span class="line">    logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建日志处理器，记录日志到文件</span></span><br><span class="line">    log_path = <span class="string">"./log.log"</span></span><br><span class="line">    file_handler = logging.FileHandler(log_path)</span><br><span class="line">    file_handler.setLevel(logging.INFO)</span><br><span class="line">    file_fmt = <span class="string">"%(asctime)-15s %(levelname)s [%(filename)s %(lineno)d] %(message)s"</span></span><br><span class="line">    file_formatter = logging.Formatter(file_fmt)</span><br><span class="line">    file_handler.setFormatter(file_formatter)</span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加日志处理器，输出日志到控制台</span></span><br><span class="line">    console_handler = logging.StreamHandler(sys.stdout)</span><br><span class="line">    console_handler.setLevel(logging.WARN)</span><br><span class="line"></span><br><span class="line">    console_fmt = <span class="string">'%(asctime)-15s [%(TASK)s] %(message)s'</span></span><br><span class="line">    console_formatter = logging.Formatter(console_fmt)</span><br><span class="line">    console_handler.setFormatter(console_formatter)</span><br><span class="line"></span><br><span class="line">    console_filter = ContextFilter()</span><br><span class="line">    console_handler.addFilter(console_filter)</span><br><span class="line"></span><br><span class="line">    logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line">    filter_dict = &#123;<span class="string">'TASK'</span>: <span class="string">'logToConsole'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录日志</span></span><br><span class="line">    logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">    logger.info(<span class="string">'info message'</span>)</span><br><span class="line">    logger.warning(<span class="string">'warn message'</span>)</span><br><span class="line">    logger.error(<span class="string">'error message1'</span>, extra=filter_dict)</span><br><span class="line">    logger.error(<span class="string">'error message2'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="logging模块工作流程"><a href="#logging模块工作流程" class="headerlink" title="logging模块工作流程"></a>logging模块工作流程</h1><p><img src="/python日志模块logging使用介绍/20180617112412833.png" alt=""></p><ol><li>判断日志的等级是否大于Logger对象的等级，如果大于，则往下执行，否则，流程结束。</li><li>产生日志。第一步，判断是否有异常，如果有，则添加异常信息。第二步，处理日志记录方法(如debug，info等)中的占位符，即一般的字符串格式化处理。</li><li>使用注册到Logger对象中的Filters进行过滤。如果有多个过滤器，则依次过滤；只要有一个过滤器返回假，则过滤结束，且该日志信息将丢弃，不再处理，而处理流程也至此结束。否则，处理流程往下执行。</li><li>在当前Logger对象中查找Handlers，如果找不到任何Handler，则往上到该Logger对象的父Logger中查找；如果找到一个或多个Handler，则依次用Handler来处理日志信息。但在每个Handler处理日志信息过程中，会首先判断日志信息的等级是否大于该Handler的等级，如果大于，则往下执行(由Logger对象进入Handler对象中)，否则，处理流程结束。</li><li>执行Handler对象中的filter方法，该方法会依次执行注册到该Handler对象中的Filter。如果有一个Filter判断该日志信息为假，则此后的所有Filter都不再执行，而直接将该日志信息丢弃，处理流程结束。</li><li>使用Formatter类格式化最终的输出结果。 注：Formatter同上述第2步的字符串格式化不同，它会添加额外的信息，比如日志产生的时间，产生日志的源代码所在的源文件的路径等等。</li><li>真正地输出日志信息(到网络，文件，终端，邮件等)。至于输出到哪个目的地，由Handler的种类来决定。</li></ol><h1 id="logging的配置"><a href="#logging的配置" class="headerlink" title="logging的配置"></a>logging的配置</h1><p>logging可以采用一下几种方式进行配置：</p><ol><li>显式创建记录器Logger、处理器Handler和格式化器Formatter，并进行相关设置；</li><li>通过简单方式进行配置，使用basicConfig()函数直接进行配置；</li><li>通过配置文件进行配置，使用fileConfig()函数读取配置文件；</li><li>通过配置字典进行配置，使用dictConfig()函数读取配置信息；</li><li>通过网络进行配置，使用listen()函数进行网络配置。</li></ol><blockquote><p>参考官方文档 <a href="https://yiyibooks.cn/xx/python_352/howto/logging.html#logging-advanced-tutorial" target="_blank" rel="noopener">python 3.52中文文档</a></p></blockquote><h2 id="显式创建"><a href="#显式创建" class="headerlink" title="显式创建"></a>显式创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simple_example'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create console handler and set level to debug</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create formatter</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add formatter to ch</span></span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add ch to logger</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>输出如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python simple_logging_module.py</span><br><span class="line">2005-03-19 15:10:26,618 - simple_example - DEBUG - debug message</span><br><span class="line">2005-03-19 15:10:26,620 - simple_example - INFO - info message</span><br><span class="line">2005-03-19 15:10:26,695 - simple_example - WARNING - warn message</span><br><span class="line">2005-03-19 15:10:26,697 - simple_example - ERROR - error message</span><br><span class="line">2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message</span><br></pre></td></tr></table></figure></p><h2 id="使用ini配置文件设置"><a href="#使用ini配置文件设置" class="headerlink" title="使用ini配置文件设置"></a>使用ini配置文件设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simpleExample'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>配置文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[loggers]</span></span><br><span class="line"><span class="attr">keys</span>=root,simpleExample</span><br><span class="line"></span><br><span class="line"><span class="section">[handlers]</span></span><br><span class="line"><span class="attr">keys</span>=consoleHandler</span><br><span class="line"></span><br><span class="line"><span class="section">[formatters]</span></span><br><span class="line"><span class="attr">keys</span>=simpleFormatter</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_root]</span></span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">handlers</span>=consoleHandler</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_simpleExample]</span></span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">handlers</span>=consoleHandler</span><br><span class="line"><span class="attr">qualname</span>=simpleExample</span><br><span class="line"><span class="attr">propagate</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[handler_consoleHandler]</span></span><br><span class="line"><span class="attr">class</span>=StreamHandler</span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">formatter</span>=simpleFormatter</span><br><span class="line"><span class="attr">args</span>=(sys.stdout,)</span><br><span class="line"></span><br><span class="line"><span class="section">[formatter_simpleFormatter]</span></span><br><span class="line"><span class="attr">format</span>=%(asctime)s - %(name)s - %(levelname)s - %(message)s</span><br><span class="line"><span class="attr">datefmt</span>=</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python simple_logging_config.py</span><br><span class="line">2005-03-19 15:38:55,977 - simpleExample - DEBUG - debug message</span><br><span class="line">2005-03-19 15:38:55,979 - simpleExample - INFO - info message</span><br><span class="line">2005-03-19 15:38:56,054 - simpleExample - WARNING - warn message</span><br><span class="line">2005-03-19 15:38:56,055 - simpleExample - ERROR - error message</span><br><span class="line">2005-03-19 15:38:56,130 - simpleExample - CRITICAL - critical message</span><br></pre></td></tr></table></figure><div class="note warning"><p>fileConfig()函数有个参数disable_existing_loggers默认为True，主要是为了向后兼容。它会使fileConfig()调用之前的所有记录器被禁用，除非这些记录器或者它们的祖先显式的出现在配置之中；这也许是／不是你需要的。请参考文档以得到更多的信息，如果需要，请指定False。<br>传递给dictConfig()的字典可以有键disable_existing_loggers，其值为布尔类型，如果没有显式的指明，其默认值为True。这会导致上述的记录器禁用行为，也许不是你希望的，这种情况下将其值设为False。</p></div><h1 id="使用Dict，Json，YAML"><a href="#使用Dict，Json，YAML" class="headerlink" title="使用Dict，Json，YAML"></a>使用Dict，Json，YAML</h1><blockquote><p>在Python 3.2中，引入了一种新的配置日志记录的方法，使用字典来保存配置信息。它提供的功能是上述的基于文件的配置的功能的超集，推荐在新的应用和部署中使用。因为用Python的字典来保存配置信息，而你可以用不同的方法来产生字典，所以你有更多的配置选择。例如你可以使用JSON格式的配置文件，或者使用YAML格式的文件来产生配置字典。或者你可以用Python代码来构造字典，从socket中接受它的pickle形式（Python一种序列化机制），或者任何对你的应用有意义的方式来构造字典。</p></blockquote><p>使用YAML格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">formatters:</span></span><br><span class="line"><span class="attr">  simple:</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line"><span class="attr">  console:</span></span><br><span class="line"><span class="attr">    class:</span> <span class="string">logging.StreamHandler</span></span><br><span class="line"><span class="attr">    level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">    formatter:</span> <span class="string">simple</span></span><br><span class="line"><span class="attr">    stream:</span> <span class="attr">ext://sys.stdout</span></span><br><span class="line"><span class="attr">loggers:</span></span><br><span class="line"><span class="attr">  simpleExample:</span></span><br><span class="line"><span class="attr">    level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">    handlers:</span> <span class="string">[console]</span></span><br><span class="line"><span class="attr">    propagate:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">root:</span></span><br><span class="line"><span class="attr">  level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">  handlers:</span> <span class="string">[console]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时编写Python脚本时，需要调试就加&lt;code&gt;print&lt;/code&gt;打印出来观察，这种操作在写一些简单的脚本时是迅速有效的。但是当进行复杂的应用开发时，这样调试就显得力不从心。所以我们需要使用Python标准库中的&lt;code&gt;logging&lt;/code&gt;模块，该模块可以定义日志格式，设置过滤信息，选择日志输出位置（文件、标准错误输出、网络等等）。&lt;/p&gt;
&lt;h1 id=&quot;使用基本的logging配置&quot;&gt;&lt;a href=&quot;#使用基本的logging配置&quot; class=&quot;headerlink&quot; title=&quot;使用基本的logging配置&quot;&gt;&lt;/a&gt;使用基本的logging配置&lt;/h1&gt;&lt;p&gt;在一般使用过程中，我们需要按照事件的严重程度将日志划分不同等级，便于我们观察和定位。&lt;br&gt;logging内置的日志级别为：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; logging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging.debug(&lt;span class=&quot;string&quot;&gt;&quot;debug message&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging.info(&lt;span class=&quot;string&quot;&gt;&quot;info message&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging.warning(&lt;span class=&quot;string&quot;&gt;&quot;warning message&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging.error(&lt;span class=&quot;string&quot;&gt;&quot;error message&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging.critical(&lt;span class=&quot;string&quot;&gt;&quot;critical message&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;日志级别的数字值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;数字值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CRITICAL&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WARNING&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NOTSET&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;logging&lt;/code&gt;模块中的还有以下几个概念，&lt;code&gt;Handler&lt;/code&gt;，&lt;code&gt;Formater&lt;/code&gt;，&lt;code&gt;Filter&lt;/code&gt;，&lt;code&gt;Logger&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Handler&lt;/code&gt;: 日志处理器。处理日志信息的输出位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Formater&lt;/code&gt;：日志的格式化。设置日志的输出格式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt;: 日志过滤器。为日志设置过滤条件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Logger&lt;/code&gt;： 日志记录器。在应用中使用该接口记录日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先我们开始最基本的日志配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义日志等级，在默认情况下，只有日志级别在WARNING及以上的信息才会被处理，所以我们需要设置适合的等级。&lt;/li&gt;
&lt;li&gt;设置日志的输出格式&lt;/li&gt;
&lt;li&gt;设置日志的输出位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上三项设置，我们可以直接调用&lt;code&gt;logging&lt;/code&gt;模块中的&lt;code&gt;basicConfig&lt;/code&gt;方法，该方法会设置全局日志处理器root_handler,全局日志记录器root_logger,并依据制定参数设置Formater作为root_handler的格式化器。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://shadowless.top/categories/python/"/>
    
    
      <category term="python" scheme="http://shadowless.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python使用configparser解析配置文件</title>
    <link href="http://shadowless.top/python/Python%E4%BD%BF%E7%94%A8configparser%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://shadowless.top/python/Python使用configparser解析配置文件/</id>
    <published>2018-06-11T13:31:57.000Z</published>
    <updated>2018-06-11T14:38:34.169Z</updated>
    
    <content type="html"><![CDATA[<p>在linux中，有很多工具拥有自己的配置文件，如：<code>vim</code>的配置文件<code>~/.vimrc</code>,<code>pip</code>的配置文件<code>~/.pip/pip.conf</code>,<code>MySQL</code>客户端的配置文件<code>/etc/mysql/my.conf</code>等等。</p><h1 id="ini配置文件"><a href="#ini配置文件" class="headerlink" title="ini配置文件"></a>ini配置文件</h1><p>使用配置文件，我们就无需每次启动设置参数。而且典型的ini配置文件与编程语言无关，可读性强。</p><p>ini配置文件格式如下<br><figure class="highlight ini"><figcaption><span>config.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">user</span> = mysql</span><br><span class="line"><span class="attr">password</span> = mysql</span><br><span class="line"><span class="attr">host</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span> = /usr</span><br><span class="line"><span class="attr">datadir</span> = /var/lib/mysql</span><br><span class="line"><span class="attr">tmpdir</span> = /tmp</span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释</span></span><br></pre></td></tr></table></figure></p><p>其中<code>[client]</code>和<code>[mysqld]</code>为章节(section),章节下面的<code>port</code>,<code>user</code>,<code>password</code>,<code>host</code>这些为选项(option)</p><h1 id="configparser解析配置文件"><a href="#configparser解析配置文件" class="headerlink" title="configparser解析配置文件"></a>configparser解析配置文件</h1><p>我们可以使用Python的configparser模块来解析配置文件。<br>首先我们需要将配置文件读取到内存，并创建一个ConfigParser对象。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">p = configparser.ConfigParser(allow_no_value=<span class="keyword">True</span>)</span><br><span class="line">p.read(<span class="string">"config.ini"</span>)</span><br></pre></td></tr></table></figure><p>以下是ConfigPaser的构造方法常用的参数:<br><code>allow_no_value</code>: 是否允许选项没有值，默认False<br><code>delimiters</code>： 分隔符，接受元组，默认(“=”, “:”)<br><code>comment_prefixes</code>: 注释前缀，接受元组，默认(“#”, “;”)</p><p>在生成了ConfigParser对象后，我们可以使用其read方法从配置文件读取配置内容，也可是使用readfp方法直接从文件描述符读取。</p><p>常用的ConfigParser查询方法：<br><code>sections</code>: 返回一个包含所有section的列表<br><code>has_sections</code>: 判断章节是否存在<br><code>items</code>: 以元组的方式返回所有选项<br><code>options</code>: 返回一个包含该章节下所有选项的列表<br><code>has_option</code>: 判断某个选项是否存在<br><code>get</code>：取得选项的值<br><code>getboolean</code>：取得选项的值，boolean类型<br><code>getint</code>：取得选项的值，int类型<br><code>getfloat</code>: 取得选项的值，float类型</p><figure class="highlight python"><figcaption><span>parse.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">p = configparser.ConfigParser(allow_no_value=<span class="keyword">True</span>)</span><br><span class="line">print(<span class="string">"读取配置文件"</span>, p.read(<span class="string">"./config.ini"</span>))</span><br><span class="line">print(<span class="string">"返回所有章节列表"</span>, p.sections())</span><br><span class="line">print(<span class="string">"判断章节是否存在"</span>, p.has_section(<span class="string">"client"</span>))</span><br><span class="line">print(<span class="string">"返回一个章节下所有选项的列表"</span>, p.options(<span class="string">"client"</span>))</span><br><span class="line">print(<span class="string">"判断一个选项是否存在"</span>, p.has_option(<span class="string">"client"</span>, <span class="string">"user"</span>))</span><br><span class="line">print(<span class="string">"获取选项的值"</span>, p.get(<span class="string">"client"</span>, <span class="string">"host"</span>))</span><br><span class="line">print(<span class="string">"获取选项的值，以int类型返回"</span>, p.getint(<span class="string">"client"</span>, <span class="string">"port"</span>))</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">读取配置文件 [<span class="string">'./config.ini'</span>]</span><br><span class="line">返回所有章节列表 [<span class="string">'client'</span>, <span class="string">'mysqld'</span>, <span class="string">'test'</span>]</span><br><span class="line">判断章节是否存在 True</span><br><span class="line">返回一个章节下所有选项的列表 [<span class="string">'port'</span>, <span class="string">'user'</span>, <span class="string">'password'</span>, <span class="string">'host'</span>]</span><br><span class="line">判断一个选项是否存在 True</span><br><span class="line">获取选项的值 127.0.0.1</span><br><span class="line">获取选项的值，以int类型返回 3306</span><br></pre></td></tr></table></figure></p><p>我们还可以修改配置文件：<br><code>remove_section</code>: 删除一个章节<br><code>add_section</code>: 添加一个章节<br><code>remove_option</code>: 删除一个选项<br><code>set</code>: 添加一个选项<br><code>write</code>: 将ConfigParser中的数据写入到文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">p = configparser.ConfigParser(allow_no_value=<span class="keyword">True</span>)</span><br><span class="line">print(<span class="string">"读取配置文件"</span>, p.read(<span class="string">"./config.ini"</span>))</span><br><span class="line">print(<span class="string">"删除一个章节"</span>, p.remove_section(<span class="string">"client"</span>))</span><br><span class="line">print(<span class="string">"添加一个章节"</span>, p.add_section(<span class="string">"mysql"</span>))</span><br><span class="line">print(<span class="string">"添加一个选项"</span>, p.set(<span class="string">"mysql"</span>, <span class="string">"host"</span>, <span class="string">"localhost"</span>))</span><br><span class="line">print(<span class="string">"添加一个选项"</span>, p.set(<span class="string">"mysql"</span>, <span class="string">"port"</span>, <span class="string">"3306"</span>))</span><br><span class="line">print(<span class="string">"写入到为文件"</span>, p.write(sys.stdout))</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">读取配置文件 [<span class="string">'./config.ini'</span>]</span><br><span class="line">删除一个章节 True</span><br><span class="line">添加一个章节 None</span><br><span class="line">添加一个选项 None</span><br><span class="line">添加一个选项 None</span><br><span class="line">[mysqld]</span><br><span class="line">basedir = /usr</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">tmpdir = /tmp</span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">[<span class="built_in">test</span>]</span><br><span class="line">host = localhost</span><br><span class="line">passwd = 123456</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">host = localhost</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">写入到为文件 None</span><br></pre></td></tr></table></figure><p>我们还可以使用字典访问的形式便捷的取值或赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: p = configparser.ConfigParser(allow_no_value=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: p.read(<span class="string">"config.ini"</span>)</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'config.ini'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: p[<span class="string">"client"</span>][<span class="string">"port"</span>]</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'3306'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: p[<span class="string">"client"</span>]</span><br><span class="line">Out[<span class="number">5</span>]: &lt;Section: client&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: p[<span class="string">"client"</span>].items()</span><br><span class="line">Out[<span class="number">6</span>]: ItemsView(&lt;Section: client&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: p[<span class="string">"client"</span>][<span class="string">"host"</span>]</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'127.0.0.1'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: p[<span class="string">"client"</span>].get(<span class="string">"host"</span>, <span class="string">"none"</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'127.0.0.1'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: p[<span class="string">"client"</span>].get(<span class="string">"host1"</span>, <span class="string">"none"</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'none'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: p[<span class="string">"client"</span>][<span class="string">"host"</span>] = <span class="string">"localhost"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: p[<span class="string">"client"</span>].get(<span class="string">"host"</span>, <span class="string">"none"</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'localhost'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux中，有很多工具拥有自己的配置文件，如：&lt;code&gt;vim&lt;/code&gt;的配置文件&lt;code&gt;~/.vimrc&lt;/code&gt;,&lt;code&gt;pip&lt;/code&gt;的配置文件&lt;code&gt;~/.pip/pip.conf&lt;/code&gt;,&lt;code&gt;MySQL&lt;/code&gt;客户端的配置文件&lt;code&gt;/etc/mysql/my.conf&lt;/code&gt;等等。&lt;/p&gt;
&lt;h1 id=&quot;ini配置文件&quot;&gt;&lt;a href=&quot;#ini配置文件&quot; class=&quot;headerlink&quot; title=&quot;ini配置文件&quot;&gt;&lt;/a&gt;ini配置文件&lt;/h1&gt;&lt;p&gt;使用配置文件，我们就无需每次启动设置参数。而且典型的ini配置文件与编程语言无关，可读性强。&lt;/p&gt;
&lt;p&gt;ini配置文件格式如下&lt;br&gt;&lt;figure class=&quot;highlight ini&quot;&gt;&lt;figcaption&gt;&lt;span&gt;config.ini&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[client]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;port&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;user&lt;/span&gt; = mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;password&lt;/span&gt; = mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;host&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[mysqld]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;basedir&lt;/span&gt; = /usr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;datadir&lt;/span&gt; = /var/lib/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;tmpdir&lt;/span&gt; = /tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;skip-external-locking&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;[client]&lt;/code&gt;和&lt;code&gt;[mysqld]&lt;/code&gt;为章节(section),章节下面的&lt;code&gt;port&lt;/code&gt;,&lt;code&gt;user&lt;/code&gt;,&lt;code&gt;password&lt;/code&gt;,&lt;code&gt;host&lt;/code&gt;这些为选项(option)&lt;/p&gt;
&lt;h1 id=&quot;configparser解析配置文件&quot;&gt;&lt;a href=&quot;#configparser解析配置文件&quot; class=&quot;headerlink&quot; title=&quot;configparser解析配置文件&quot;&gt;&lt;/a&gt;configparser解析配置文件&lt;/h1&gt;&lt;p&gt;我们可以使用Python的configparser模块来解析配置文件。&lt;br&gt;首先我们需要将配置文件读取到内存，并创建一个ConfigParser对象。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://shadowless.top/categories/python/"/>
    
    
      <category term="python" scheme="http://shadowless.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java的字符串格式化</title>
    <link href="http://shadowless.top/java/Java%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://shadowless.top/java/Java的字符串格式化/</id>
    <published>2018-06-10T08:54:42.000Z</published>
    <updated>2018-06-10T11:15:26.195Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下Java的字符串格式化，方便日后查用。</p><h1 id="Java格式化"><a href="#Java格式化" class="headerlink" title="Java格式化"></a>Java格式化</h1><p>在Java中，数字和日期的格式化并没有结合到输出、输入功能上，因为通常显示给用户的是GUI或WEB页面，显然只绑定在命令行输出上是不能满足需求的。<br>格式化的功能是由<code>java.util.Formatter</code>这个类来实现的。为了方便，我们不需要直接调用这个class上的方法，在<code>Java 5.0</code>以后的版本，该功能已经加入到输入输出类和<code>String</code>上了，我们直接调用<code>String.format()</code>这个静态方法传入值与格式即可。</p><h2 id="format-方法基本介绍"><a href="#format-方法基本介绍" class="headerlink" title="format()方法基本介绍"></a>format()方法基本介绍</h2><p><code>java.util.Formatter</code>类的<code>format</code>方法有两个重载版本: <code>format(String format, Object ... args)</code>和<code>format(Locale l, String format, Object ... args)</code>，两者区别为前者使用本地语言环境，后者指定语言环境。</p><p>Formatter的用法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%[argument number$][flags][width][.precision]type</span><br><span class="line"></span><br><span class="line">argument number: 可选，是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 <span class="string">"1$"</span> 引用，第二个参数由 <span class="string">"2$"</span> 引用，依此类推。</span><br><span class="line">flags: 可选，特定类型的选项，例如数字要加逗号或正负号</span><br><span class="line">width: 可选，最小字符数，可以超过，不足则补齐</span><br><span class="line">precision:可选，精确度</span><br><span class="line">type:必须，类型标识</span><br></pre></td></tr></table></figure></p><p>Java的格式化主要分为两大类，一类为常规类型、字符类型和数值类型，另一类为日期和时间类型。我们按照这两大类来整理。</p><a id="more"></a><h3 id="常规类型格式化"><a href="#常规类型格式化" class="headerlink" title="常规类型格式化"></a>常规类型格式化</h3><h4 id="type-类型标识"><a href="#type-类型标识" class="headerlink" title="type:类型标识"></a>type:类型标识</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">"My name is %s"</span>, <span class="string">"Tom"</span>));</span><br></pre></td></tr></table></figure><p><code>%</code>为占位符，<code>s</code>为转换符，转换类型需要与参数相兼容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Formattable;</span><br><span class="line"><span class="keyword">import</span> java.util.Formatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        formatConversion();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatConversion</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"'b':将参数格式化为boolean类型输出，'B'的效果相同,但结果中字母为大写。%b"</span>,<span class="keyword">false</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'h':将参数格式化为散列输出，原理：Integer.toHexString(arg.hashCode())，'H'的效果相同,但结果中字母为大写。%h"</span>,<span class="string">"ABC"</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'s':将参数格式化为字符串输出，如果参数实现了 Formattable接口，则调用 formatTo方法。'S'的效果相同。%s"</span>,<span class="number">16</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"FormatImpl类实现了Formattable接口：%s"</span>,<span class="keyword">new</span> FormatImpl()));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'c':将参数格式化为Unicode字符，'C'的效果相同。%c"</span>,<span class="string">'A'</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'d':将参数格式化为十进制整数。%d"</span>,<span class="number">11</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'o':将参数格式化为八进制整数。%o"</span>,<span class="number">9</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'x':将参数格式化为十六进制整数。%x"</span>,<span class="number">17</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'e':将参数格式化为科学计数法的浮点数，'E'的效果相同。%E"</span>,<span class="number">10.000001</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'f':将参数格式化为十进制浮点数。%f"</span>,<span class="number">10.000001</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'g':根据具体情况，自动选择用普通表示方式还是科学计数法方式，'G'效果相同。10.01=%g"</span>,<span class="number">10.01</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'g':根据具体情况，自动选择用普通表示方式还是科学计数法方式，'G'效果相同。10.00000000005=%g"</span>,<span class="number">10.00000000005</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'a':结果被格式化为带有效位数和指数的十六进制浮点数，'A'效果相同,但结果中字母为大写。%a"</span>,<span class="number">10.1</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'t':时间日期格式化前缀，会在后面讲述"</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'%%':输出%%。%%"</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">"'n'平台独立的行分隔符。System.getProperty(\"line.separator\")可以取得平台独立的行分隔符，但是用在format中间未免显得过于烦琐了%n已经换行"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FormatImpl</span> <span class="keyword">implements</span> <span class="title">Formattable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">formatTo</span><span class="params">(Formatter formatter, <span class="keyword">int</span> flags, <span class="keyword">int</span> width, <span class="keyword">int</span> precision)</span> </span>&#123;</span><br><span class="line">            formatter.format(<span class="string">"我是Formattable接口的实现类"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'b'</span>:将参数格式化为boolean类型输出，<span class="string">'B'</span>的效果相同,但结果中字母为大写。<span class="literal">false</span></span><br><span class="line"><span class="string">'h'</span>:将参数格式化为散列输出，原理：Integer.toHexString(arg.hashCode())，<span class="string">'H'</span>的效果相同,但结果中字母为大写。fc42</span><br><span class="line"><span class="string">'s'</span>:将参数格式化为字符串输出，如果参数实现了 Formattable接口，则调用 formatTo方法。<span class="string">'S'</span>的效果相同。16</span><br><span class="line">FormatImpl类实现了Formattable接口：我是Formattable接口的实现类</span><br><span class="line"><span class="string">'c'</span>:将参数格式化为Unicode字符，<span class="string">'C'</span>的效果相同。A</span><br><span class="line"><span class="string">'d'</span>:将参数格式化为十进制整数。11</span><br><span class="line"><span class="string">'o'</span>:将参数格式化为八进制整数。11</span><br><span class="line"><span class="string">'x'</span>:将参数格式化为十六进制整数。11</span><br><span class="line"><span class="string">'e'</span>:将参数格式化为科学计数法的浮点数，<span class="string">'E'</span>的效果相同。1.000000E+01</span><br><span class="line"><span class="string">'f'</span>:将参数格式化为十进制浮点数。10.000001</span><br><span class="line"><span class="string">'g'</span>:根据具体情况，自动选择用普通表示方式还是科学计数法方式，<span class="string">'G'</span>效果相同。10.01=10.0100</span><br><span class="line"><span class="string">'g'</span>:根据具体情况，自动选择用普通表示方式还是科学计数法方式，<span class="string">'G'</span>效果相同。10.00000000005=10.0000</span><br><span class="line"><span class="string">'a'</span>:结果被格式化为带有效位数和指数的十六进制浮点数，<span class="string">'A'</span>效果相同,但结果中字母为大写。0x1.4333333333333p3</span><br><span class="line"><span class="string">'t'</span>:时间日期格式化前缀，会在后面讲述</span><br><span class="line"><span class="string">'%'</span>:输出%。%</span><br><span class="line"><span class="string">'n'</span>平台独立的行分隔符。System.getProperty(<span class="string">"line.separator"</span>)可以取得平台独立的行分隔符，但是用在format中间未免显得过于烦琐了</span><br><span class="line">已经换行</span><br></pre></td></tr></table></figure><h4 id="argument-number-位置参数"><a href="#argument-number-位置参数" class="headerlink" title="argument number:位置参数"></a>argument number:位置参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(&quot;Java提供了%1$s类用于格式化，我们可以使用%1$s的%2$s方法格式化字符串。&quot;, &quot;java.util.Formatter&quot;, &quot;format()&quot;));</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java提供了java.util.Formatter类用于格式化，我们可以使用java.util.Formatter的format()方法格式化字符串。</span><br></pre></td></tr></table></figure><p>可以使用<code>&lt;</code>标识重复使用之前用过的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">"%s, %&lt;s, %&lt;s"</span>, <span class="string">"重复使用参数"</span>));</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重复使用参数, 重复使用参数, 重复使用参数</span><br></pre></td></tr></table></figure><h4 id="flags-特定类型选项"><a href="#flags-特定类型选项" class="headerlink" title="flags:特定类型选项"></a>flags:特定类型选项</h4><p>我们可以使用flags参数控制特定类型输出的格式，如左对齐，逗号隔开数字。</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>&#39;-&#39;</code></td><td>在最小宽度内左对齐，不可以与“用0填充”同时使用</td></tr><tr><td><code>&#39;+&#39;</code></td><td>结果总是包括一个符号</td></tr><tr><td><code>&#39; &#39;</code></td><td>正值前加空格，负值前加负号</td></tr><tr><td><code>&#39;0&#39;</code></td><td>结果将用零来填充</td></tr><tr><td><code>&#39;,&#39;</code></td><td>每3位数字之间用“，”分隔(只适用于fgG的转换)</td></tr><tr><td><code>&#39;(&#39;</code></td><td>若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(只适用于eEfgG的转换)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatFlags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"'-':在最小宽度内左对齐，不可与\"用0填充\"同时使用。"</span>);</span><br><span class="line">    System.out.println(String.format(<span class="string">"设置最小宽度为8为，左对齐。%-8d:%-8d:%-8d%n"</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">99999999</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'0':结果将用零来填充。设置最小宽度为8，%08d:%08d:%08d"</span>, <span class="number">1</span>, -<span class="number">22</span>, <span class="number">99999990</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'+':结果总是包括一个符号。%+d:%+d:%+d"</span>, <span class="number">1</span>, -<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"' ':正值前加空格，负值前加负号。% d:% d:% d"</span>, <span class="number">1</span>, -<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"',':每3位数字之间用“，”分隔(只适用于fgG的转换)。%,d:%,d:%,d"</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">1000</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'(':若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(只适用于eEfgG的转换)。%(d:%(d"</span>, <span class="number">1</span>, -<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'-'</span>:在最小宽度内左对齐，不可与<span class="string">"用0填充"</span>同时使用。</span><br><span class="line">设置最小宽度为8为，左对齐。1       :22      :99999999</span><br><span class="line"></span><br><span class="line"><span class="string">'0'</span>:结果将用零来填充。设置最小宽度为8，00000001:-0000022:99999990</span><br><span class="line"><span class="string">'+'</span>:结果总是包括一个符号。+1:-2:+0</span><br><span class="line"><span class="string">' '</span>:正值前加空格，负值前加负号。 1:-2: 0</span><br><span class="line"><span class="string">','</span>:每3位数字之间用“，”分隔(只适用于fgG的转换)。1:100:1,000</span><br><span class="line"><span class="string">'('</span>:若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(只适用于eEfgG的转换)。1:(1)</span><br></pre></td></tr></table></figure><h4 id="width-设置宽度"><a href="#width-设置宽度" class="headerlink" title="width:设置宽度"></a>width:设置宽度</h4><p>最小字幅宽度，注意，这并非总数，输出可以超过此宽度，不足则会自动补0。该值不能为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">"'0':结果将用零来填充。设置最小宽度为8，%08d:%08d:%08d"</span>, <span class="number">1</span>, -<span class="number">22</span>, <span class="number">99999990</span>));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'0'</span>:结果将用零来填充。设置最小宽度为8，00000001:-0000022:99999990</span><br></pre></td></tr></table></figure><h4 id="precision-精确度"><a href="#precision-精确度" class="headerlink" title=".precision:精确度"></a>.precision:精确度</h4><p>用于控制浮点数的精确度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">"设置精度为2位：%.2f"</span>, <span class="number">1f</span>));</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置精度为2位：1.00</span><br></pre></td></tr></table></figure><h3 id="日期时间类型格式化"><a href="#日期时间类型格式化" class="headerlink" title="日期时间类型格式化"></a>日期时间类型格式化</h3><p>时间日期格式化的转换符分为三类，时间格式化转换符，日期格式化转换符，时间日期格式化转换符</p><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><p>时间格式化字符串格式为<code>%[argument number$][flags][width]type</code><br>其中type字段第一个字符固定为T或t。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 格式化时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"这是格式化时间相关的，具体输出跟你执行代码时间有关"</span>);</span><br><span class="line">   Calendar calendar = Calendar.getInstance();</span><br><span class="line">   System.out.println(String.format(<span class="string">"'H':2位数24小时制，不足两位前面补0：%tH（范围：00-23）"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'I':2位数12小时制，不足两位前面补0：%tI（范围：01-12）"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'k':24小时制，不足两位不补0：%tk（范围：0-23）"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'l':12小时制，不足两位不补0：%tl（范围：1-12）"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'M':2位数的分钟，不足两位前面补0：%tM（范围：00-59）"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'S':分钟中的秒，2位数，不足两位前面补0，60是支持闰秒的一个特殊值：%tS（范围：00-60）"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'L':3位数的毫秒，不足三位前面补0：%tL（范围：000-999）"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'N':9位数的微秒，不足九位前面补0：%tN（范围：000000000-999999999）"</span>, calendar));</span><br><span class="line"></span><br><span class="line">   System.out.println(String.format(<span class="string">"'p':输出本地化的上午下午，例如，Locale.US为am或pm，Locale.CHINA为上午或下午"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(Locale.US, <span class="string">"Local.US=%tp"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(Locale.CHINA, <span class="string">"Local.CHINA=%tp"</span>, calendar));</span><br><span class="line">   System.out.println();</span><br><span class="line"></span><br><span class="line">   System.out.println(String.format(<span class="string">"'z':时区：%tz"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'Z':时区缩写字符串：%tZ"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'s':从1970-1-1 00:00到现在所经历的秒数：%ts"</span>, calendar));</span><br><span class="line">   System.out.println(String.format(<span class="string">"'Q':从1970-1-1 00:00到现在所经历的毫秒数：%tQ"</span>, calendar));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">这是格式化时间相关的，具体输出跟你执行代码时间有关</span><br><span class="line"><span class="string">'H'</span>:2位数24小时制，不足两位前面补0：18（范围：00-23）</span><br><span class="line"><span class="string">'I'</span>:2位数12小时制，不足两位前面补0：06（范围：01-12）</span><br><span class="line"><span class="string">'k'</span>:24小时制，不足两位不补0：18（范围：0-23）</span><br><span class="line"><span class="string">'l'</span>:12小时制，不足两位不补0：6（范围：1-12）</span><br><span class="line"><span class="string">'M'</span>:2位数的分钟，不足两位前面补0：59（范围：00-59）</span><br><span class="line"><span class="string">'S'</span>:分钟中的秒，2位数，不足两位前面补0，60是支持闰秒的一个特殊值：44（范围：00-60）</span><br><span class="line"><span class="string">'L'</span>:3位数的毫秒，不足三位前面补0：638（范围：000-999）</span><br><span class="line"><span class="string">'N'</span>:9位数的微秒，不足九位前面补0：638000000（范围：000000000-999999999）</span><br><span class="line"><span class="string">'p'</span>:输出本地化的上午下午，例如，Locale.US为am或pm，Locale.CHINA为上午或下午</span><br><span class="line">Local.US=pm</span><br><span class="line">Local.CHINA=下午</span><br><span class="line"></span><br><span class="line"><span class="string">'z'</span>:时区：+0800</span><br><span class="line"><span class="string">'Z'</span>:时区缩写字符串：CST</span><br><span class="line"><span class="string">'s'</span>:从1970-1-1 00:00到现在所经历的秒数：1528628384</span><br><span class="line"><span class="string">'Q'</span>:从1970-1-1 00:00到现在所经历的毫秒数：1528628384638</span><br></pre></td></tr></table></figure><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"这是格式化时间相关的，具体输出跟你执行代码时间有关"</span>);</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    System.out.println(String.format(<span class="string">"'B':本地化显示月份字符串，如：January、February"</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'b':本地化显示月份字符串的缩写，如：Jan、Feb"</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'h':本地化显示月份字符串的缩写，效果同'b'"</span>));</span><br><span class="line">    System.out.println(String.format(Locale.US, <span class="string">"Locale.US 月份=%1$tB，缩写=%1$tb"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(Locale.CHINA, <span class="string">"Locale.CHINA 月份=%1$tB，缩写=%1$tb"</span>, calendar));</span><br><span class="line"></span><br><span class="line">    System.out.println(String.format(<span class="string">"'A':本地化显示星期几字符串，如：Sunday、Monday"</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'a':本地化显示星期几字符串的缩写，如：Sun、Mon"</span>));</span><br><span class="line">    System.out.println(String.format(Locale.US, <span class="string">"Locale.US 星期几=%1$tA，缩写=%1$ta"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(Locale.CHINA, <span class="string">"Locale.CHINA 星期几=%1$tA，缩写=%1$ta"</span>, calendar));</span><br><span class="line"></span><br><span class="line">    System.out.println(String.format(<span class="string">"'C':年份除以100的结果，显示两位数，不足两位前面补0：%tC（范围：00-99）"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'Y':显示四位数的年份，格利高里历，即公历。不足四位前面补0：%tY"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'y':显示年份的后两位：%ty（范围：00-99）"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'j':显示当前公历年的天数：第%tj天（范围：001-366）"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'m':显示当前月份：%tm月（范围：01-13？怎么会有13个月？）"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'d':显示是当前月的第几天，不足两位前面补0：%1$tm月第%1$td天（范围：01-31）"</span>, calendar));</span><br><span class="line">    System.out.println(String.format(<span class="string">"'e':显示是当前月的第几天：%1$tm月第%1$te天（范围：1-31）"</span>, calendar));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">这是格式化时间相关的，具体输出跟你执行代码时间有关</span><br><span class="line"><span class="string">'B'</span>:本地化显示月份字符串，如：January、February</span><br><span class="line"><span class="string">'b'</span>:本地化显示月份字符串的缩写，如：Jan、Feb</span><br><span class="line"><span class="string">'h'</span>:本地化显示月份字符串的缩写，效果同<span class="string">'b'</span></span><br><span class="line">Locale.US 月份=June，缩写=Jun</span><br><span class="line">Locale.CHINA 月份=六月，缩写=6月</span><br><span class="line"><span class="string">'A'</span>:本地化显示星期几字符串，如：Sunday、Monday</span><br><span class="line"><span class="string">'a'</span>:本地化显示星期几字符串的缩写，如：Sun、Mon</span><br><span class="line">Locale.US 星期几=Sunday，缩写=Sun</span><br><span class="line">Locale.CHINA 星期几=星期日，缩写=周日</span><br><span class="line"><span class="string">'C'</span>:年份除以100的结果，显示两位数，不足两位前面补0：20（范围：00-99）</span><br><span class="line"><span class="string">'Y'</span>:显示四位数的年份，格利高里历，即公历。不足四位前面补0：2018</span><br><span class="line"><span class="string">'y'</span>:显示年份的后两位：18（范围：00-99）</span><br><span class="line"><span class="string">'j'</span>:显示当前公历年的天数：第161天（范围：001-366）</span><br><span class="line"><span class="string">'m'</span>:显示当前月份：06月（范围：01-13？怎么会有13个月？）</span><br><span class="line"><span class="string">'d'</span>:显示是当前月的第几天，不足两位前面补0：06月第10天（范围：01-31）</span><br><span class="line"><span class="string">'e'</span>:显示是当前月的第几天：06月第10天（范围：1-31）</span><br></pre></td></tr></table></figure><p>时间日期格式化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化时间日期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatTimeAndDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"这是格式化时间相关的，具体输出跟你执行代码时间有关"</span>);</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    <span class="comment">//%tH:%tM的缩写</span></span><br><span class="line">    System.out.println(String.format(<span class="string">"'R':将时间格式化为：HH:MM（24小时制）。输出：%tR"</span>, calendar));</span><br><span class="line">    <span class="comment">//%tH:%tM:%tS的缩写</span></span><br><span class="line">    System.out.println(String.format(<span class="string">"'T':将时间格式化为：HH:MM:SS（24小时制）。输出：%tT"</span>, calendar));</span><br><span class="line">    <span class="comment">//%tI:%tM:%tS %Tp的缩写，输出形如：</span></span><br><span class="line">    System.out.println(String.format(<span class="string">"'r':将时间格式化为：09:23:15 下午，跟设置的语言地区有关。输出：%tr"</span>, calendar));</span><br><span class="line">    <span class="comment">//%tm/%td/%ty的缩写，输出形如</span></span><br><span class="line">    System.out.println(String.format(<span class="string">"'D':将时间格式化为：10/19/16。输出：%tD"</span>, calendar));</span><br><span class="line">    <span class="comment">//%tY-%tm-%td，输出形如：</span></span><br><span class="line">    System.out.println(String.format(<span class="string">"'F':将时间格式化为：2016-10-19。输出：%tF"</span>, calendar));</span><br><span class="line">    <span class="comment">//%ta %tb %td %tT %tZ %tY，输出形如：Sun Jul 20 16:17:00 EDT 1969</span></span><br><span class="line">    System.out.println(String.format(<span class="string">"'c':将时间格式化为\"Sun Jul 20 16:17:00 EDT 1969\"。输出：%tc"</span>, calendar));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 格式化时间日期</span><br><span class="line"> */</span><br><span class="line">private static void <span class="function"><span class="title">formatTimeAndDate</span></span>() &#123;</span><br><span class="line">    System.out.println(<span class="string">"这是格式化时间相关的，具体输出跟你执行代码时间有关"</span>);</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    //%tH:%tM的缩写</span><br><span class="line">    System.out.println(String.format(<span class="string">"'R':将时间格式化为：HH:MM（24小时制）。输出：%tR"</span>, calendar));</span><br><span class="line">    //%tH:%tM:%tS的缩写</span><br><span class="line">    System.out.println(String.format(<span class="string">"'T':将时间格式化为：HH:MM:SS（24小时制）。输出：%tT"</span>, calendar));</span><br><span class="line">    //%tI:%tM:%tS %Tp的缩写，输出形如：</span><br><span class="line">    System.out.println(String.format(<span class="string">"'r':将时间格式化为：09:23:15 下午，跟设置的语言地区有关。输出：%tr"</span>, calendar));</span><br><span class="line">    //%tm/%td/%ty的缩写，输出形如</span><br><span class="line">    System.out.println(String.format(<span class="string">"'D':将时间格式化为：10/19/16。输出：%tD"</span>, calendar));</span><br><span class="line">    //%tY-%tm-%td，输出形如：</span><br><span class="line">    System.out.println(String.format(<span class="string">"'F':将时间格式化为：2016-10-19。输出：%tF"</span>, calendar));</span><br><span class="line">    //%ta %tb %td %tT %tZ %tY，输出形如：Sun Jul 20 16:17:00 EDT 1969</span><br><span class="line">    System.out.println(String.format(<span class="string">"'c':将时间格式化为\"Sun Jul 20 16:17:00 EDT 1969\"。输出：%tc"</span>, calendar));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考文档：<br><a href="https://www.cnblogs.com/travellife/p/Java-zi-fu-chuan-ge-shi-hua-xiang-jie.html" target="_blank" rel="noopener">踏歌行—Java 字符串格式化详解</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/util/Formatter.html" target="_blank" rel="noopener">Java API – Formatter</a><br><a href="https://blog.csdn.net/lonely_fireworks/article/details/7962171/" target="_blank" rel="noopener">lonely_fireworks的专栏—JAVA字符串格式化-String.format()的使用</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下Java的字符串格式化，方便日后查用。&lt;/p&gt;
&lt;h1 id=&quot;Java格式化&quot;&gt;&lt;a href=&quot;#Java格式化&quot; class=&quot;headerlink&quot; title=&quot;Java格式化&quot;&gt;&lt;/a&gt;Java格式化&lt;/h1&gt;&lt;p&gt;在Java中，数字和日期的格式化并没有结合到输出、输入功能上，因为通常显示给用户的是GUI或WEB页面，显然只绑定在命令行输出上是不能满足需求的。&lt;br&gt;格式化的功能是由&lt;code&gt;java.util.Formatter&lt;/code&gt;这个类来实现的。为了方便，我们不需要直接调用这个class上的方法，在&lt;code&gt;Java 5.0&lt;/code&gt;以后的版本，该功能已经加入到输入输出类和&lt;code&gt;String&lt;/code&gt;上了，我们直接调用&lt;code&gt;String.format()&lt;/code&gt;这个静态方法传入值与格式即可。&lt;/p&gt;
&lt;h2 id=&quot;format-方法基本介绍&quot;&gt;&lt;a href=&quot;#format-方法基本介绍&quot; class=&quot;headerlink&quot; title=&quot;format()方法基本介绍&quot;&gt;&lt;/a&gt;format()方法基本介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;java.util.Formatter&lt;/code&gt;类的&lt;code&gt;format&lt;/code&gt;方法有两个重载版本: &lt;code&gt;format(String format, Object ... args)&lt;/code&gt;和&lt;code&gt;format(Locale l, String format, Object ... args)&lt;/code&gt;，两者区别为前者使用本地语言环境，后者指定语言环境。&lt;/p&gt;
&lt;p&gt;Formatter的用法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%[argument number$][flags][width][.precision]type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;argument number: 可选，是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 &lt;span class=&quot;string&quot;&gt;&quot;1$&quot;&lt;/span&gt; 引用，第二个参数由 &lt;span class=&quot;string&quot;&gt;&quot;2$&quot;&lt;/span&gt; 引用，依此类推。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flags: 可选，特定类型的选项，例如数字要加逗号或正负号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;width: 可选，最小字符数，可以超过，不足则补齐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;precision:可选，精确度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type:必须，类型标识&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Java的格式化主要分为两大类，一类为常规类型、字符类型和数值类型，另一类为日期和时间类型。我们按照这两大类来整理。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://shadowless.top/categories/java/"/>
    
    
      <category term="java" scheme="http://shadowless.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python使用sys.stdin与fileinput获取标准输入</title>
    <link href="http://shadowless.top/python/python%E4%BD%BF%E7%94%A8sys-stdin%E4%B8%8Efileinput%E8%8E%B7%E5%8F%96%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5/"/>
    <id>http://shadowless.top/python/python使用sys-stdin与fileinput获取标准输入/</id>
    <published>2018-06-08T11:15:14.000Z</published>
    <updated>2018-06-09T16:28:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。</p></blockquote><h1 id="stdin"><a href="#stdin" class="headerlink" title="stdin"></a>stdin</h1><p>Python的标准库<code>sys</code>提供了三个文件描述符:</p><table><thead><tr><th style="text-align:center">标准输入</th><th style="text-align:center">标准输出</th><th style="text-align:center">错误输出</th></tr></thead><tbody><tr><td style="text-align:center">stdin</td><td style="text-align:center">stdout</td><td style="text-align:center">stderr</td></tr></tbody></table><p>以下例子是获取标准输入，然后写入到标准输入。<br><figure class="highlight python"><figcaption><span>read_stdin.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure></p><p>接下来我们可以在命令行使用该脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | python read_stdin.py</span><br><span class="line">$ python read_stdin.py &lt; /etc/passwd</span><br><span class="line">$ python read_stdin.py -</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>sys.stdin</code>为文件描述符，故拥有文件对象的方法，我们可以使用<code>read()</code>方法读取标准输入的所有内容，或者使用<code>readlines()</code>将标准输入内容读取到一个<code>list</code>中。</p><figure class="highlight python"><figcaption><span>upper.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_upper_list</span><span class="params">()</span>:</span></span><br><span class="line">    content_list =  sys.stdin.readlines()</span><br><span class="line">    <span class="keyword">return</span> [i.upper() <span class="keyword">for</span> i <span class="keyword">in</span> content_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> get_upper_list():</span><br><span class="line">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure><p>上述脚本中定义了<code>get_content()</code>函数，该函数使用<code>sys.stdin</code>标准输入的<code>readlines()</code>方法读取所有行，以列表类型保存于<code>content_list</code>，使用列表解析，调用每个元素(字符串类型)的<code>upper()</code>方法，构造一个新的列表并返回。<br>迭代<code>get_upper_list()</code>函数返回的新列表，将每一行写入标准输入。</p><p>该脚本运行效果如下：<br><img src="http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609095401158.png" alt=""></p><p>利用<code>sys.stdin</code>，我们几乎可以不再使用<code>awk</code>。将Python与Linux管道结合，可以充分发挥Python语言的文字处理能力。</p><h1 id="fileinput"><a href="#fileinput" class="headerlink" title="fileinput"></a>fileinput</h1><p>对于<code>awk</code>，它可以同时处理多个文件，在Python中我们可以使用<code>fileinput</code>这个标准库来达到同样效果。<br><code>fileinput</code>比<code>sys.stdin</code>更为通用，它可以遍历<code>sys.argv[1:]</code>列表(所有命令行参数)中的文件，如果该列表为空(没有提供文件名参数)，则默认读取标准输入的内容。</p><figure class="highlight python"><figcaption><span>read_from_fileinput.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>上述脚本直接调用了fileinput模块的input函数，该函数返回一个FileInput实例化的可迭代对象，可以使用for循环遍历取得每一行内容。fileinput既可以从标准输入读取数据，也可以从文件中(一个或多个)读取数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python read_from_fileinput.py -  <span class="comment"># 从标准输入读取数据</span></span><br><span class="line">$ cat /etc/passwd | python read_from_fileinput.py  <span class="comment"># 通过管道读取passwd数据</span></span><br><span class="line">$ python read_from_fileinput.py &lt; /etc/passwd  <span class="comment"># 通过重定向读取passwd数据</span></span><br><span class="line">$ python read_from_fileinput.py /etc/passwd  <span class="comment"># 直接读取passwd文件数据</span></span><br><span class="line">$ python read_from_fileinput.py /etc/passwd /etc/hosts  <span class="comment"># 直接读取passwd与hosts文件数据</span></span><br></pre></td></tr></table></figure></p><p>fileinput还提供了一些方法让我们知道当前读取的内容属于哪一个文件等便利的方法，常用方法如下：</p><ul><li><code>filename</code>: 当前正在读取文件的文件名 str</li><li><code>fileno</code>: 文件的描述符 int</li><li><code>filelineno</code>: 正在读取的行时当前文件的第几行 int</li><li><code>isfirstline</code>: 正在读取的行是否是当前文件的第一行 bool</li><li><code>isstdin</code>: 正在读的问价是否时从标准输入读取的 bool</li><li><code>nextfile</code>: 关闭当前正在读取的文件，从下一个文件第一行开始 None</li></ul><p>我们可以完成一个简单的脚本来展示一下fileinput的各个方法：</p><figure class="highlight python"><figcaption><span>read_file.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    meta = [<span class="string">"文件名:"</span> + str(fileinput.filename()),</span><br><span class="line">    <span class="string">" 文件描述符:"</span> + str(fileinput.fileno()),</span><br><span class="line">    <span class="string">" 行号:"</span> + str(fileinput.filelineno()),</span><br><span class="line">    <span class="string">" 首行:"</span> + str(fileinput.isfirstline()),</span><br><span class="line">    <span class="string">" 标准输入:"</span> + str(fileinput.isstdin()) + <span class="string">" "</span>]</span><br><span class="line">    meta_ljust = [i.ljust(<span class="number">9</span>) <span class="keyword">for</span> i <span class="keyword">in</span> meta]</span><br><span class="line">    print(*meta_ljust, end=<span class="string">""</span>)</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p><img src="http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609114727921.png" alt=""></p><p>同时fileinput还提供了钩子函数，可以帮助去自定义文件访问的方式：<br>fileinput内置了两个函数：<br><code>hook_compressed</code>: 识别并打开<code>.gz</code>和<code>.bz2</code>的压缩文件<br><code>hook_encoded</code>: 以特定的编码格式打开文件</p><p>读取一个<code>.gz</code>压缩文件，如下所示：<br><figure class="highlight python"><figcaption><span>read_compressed.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(openhook=fileinput.hook_compressed):</span><br><span class="line">    print(line.decode(<span class="string">'utf-8'</span>), end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></p><p><img src="http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180610121207368.png" alt=""></p><p>在中文windows下有读取utf-8,或在linux下读取gbk需要指定对应的编码格式，如下所示：</p><figure class="highlight python"><figcaption><span>read_encoded.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(openhook=fileinput.hook_encoded(encoding=<span class="string">"gbk"</span>)):</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;stdin&quot;&gt;&lt;a href=&quot;#stdin&quot; class=&quot;headerlink&quot; title=&quot;stdin&quot;&gt;&lt;/a&gt;stdin&lt;/h1&gt;&lt;p&gt;Python的标准库&lt;code&gt;sys&lt;/code&gt;提供了三个文件描述符:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标准输入&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标准输出&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;错误输出&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;stdin&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;stdout&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;stderr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下例子是获取标准输入，然后写入到标准输入。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;read_stdin.py&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sys.stdin:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sys.stdout.write(line)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来我们可以在命令行使用该脚本。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat /etc/passwd | python read_stdin.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ python read_stdin.py &amp;lt; /etc/passwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ python read_stdin.py -&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://shadowless.top/categories/python/"/>
    
    
      <category term="python" scheme="http://shadowless.top/tags/python/"/>
    
      <category term="linux" scheme="http://shadowless.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo与Gitpages搭建博客</title>
    <link href="http://shadowless.top/hexo/%E4%BD%BF%E7%94%A8Hexo%E4%B8%8EGitpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://shadowless.top/hexo/使用Hexo与Gitpages搭建博客/</id>
    <published>2018-06-03T14:02:48.000Z</published>
    <updated>2018-06-09T17:04:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo与Gitpages搭建博客"><a href="#使用Hexo与Gitpages搭建博客" class="headerlink" title="使用Hexo与Gitpages搭建博客"></a>使用Hexo与Gitpages搭建博客</h1><p>一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。</p><p>各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。</p><h2 id="搭建本地Hexo运行环境"><a href="#搭建本地Hexo运行环境" class="headerlink" title="搭建本地Hexo运行环境"></a>搭建本地Hexo运行环境</h2><p>我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。</p><h3 id="了解Hexo"><a href="#了解Hexo" class="headerlink" title="了解Hexo"></a>了解Hexo</h3><blockquote><p>Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。</p></blockquote><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==" title="Hexo官网"><i class="fa fa-external-link"></i> Hexo</span><h3 id="Git版本管理工具安装"><a href="#Git版本管理工具安装" class="headerlink" title="Git版本管理工具安装"></a>Git版本管理工具安装</h3><p>Git是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。</p><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" title="下载git" target="_blank" rel="noopener">git</a>。</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>；或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><div class="note warning"><p><strong> Windows用户　</strong><br>由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。<br>或者可以参考这里<a href="https://github.com/waylau/git-for-win" title="git for windows下载" target="_blank" rel="noopener">Git for Windows 国内下载站</a>。</p></div><p>如果想学习Git的使用，推荐一下廖老师的教程　<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDA=" title="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000"><i class="fa fa-external-link"></i> 廖雪峰的官方网站</span></p><h3 id="Node-js环境搭建"><a href="#Node-js环境搭建" class="headerlink" title="Node.js环境搭建"></a>Node.js环境搭建</h3><p>由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。</p><h4 id="了解Node-js"><a href="#了解Node-js" class="headerlink" title="了解Node.js"></a>了解Node.js</h4><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p></blockquote><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi8=" title="Node.js官网"><i class="fa fa-external-link"></i> Node</span><a id="more"></a><h4 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h4><p>使用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>来安装Node.js<br><div class="tabs" id="nodejs"><ul class="nav-tabs"><li class="tab active"><a href="#nodejs-1"><i class="fa fa-download" "=""></i>cURL</a></li><li class="tab"><a href="#nodejs-2"><i class="fa fa-download" "=""></i>Wget</a></li></ul><div class="tab-content"><div class="tab-pane active" id="nodejs-1"><p>使用cURL安装<br><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p></div><div class="tab-pane" id="nodejs-2"><p>使用Wget安装<br><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p></div></div></div></p><p>安装完成后重启终端，执行以下命令安装Node.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure></p><div class="note info"><p>也可以直接下载<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装程序</a>执行安装</p></div><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>使用Node.js的包管理工具npm安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装完成后，可以在命令行终端试一下hexo是否可以使用<br><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180604111622738.png" alt="hexo"></p><p>若不能使用，可以检查以下几方面：</p><ul><li>npm install过程是否有异常</li><li>检查环境变量是否正常，安装时会在/usr/bin/中创建hexo可执行程序的软链接</li><li>若链接不存在，检查/usr/lib/node_modules/hexo/bin/hexo是否存在，手工在/usr/bin/下创建链接<code>ln -s /usr/lib/node_modules/hexo/bin/hexo /usr/bin/hexo</code></li></ul><h3 id="使用Hexo建站"><a href="#使用Hexo建站" class="headerlink" title="使用Hexo建站"></a>使用Hexo建站</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>使用如下命令，hexo可以在一个指定文件夹(blog)中创建所需文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>完成后使用<code>tree blog</code>可以得到目录树如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml    # 网站的配置信息，您可以在此配置大部分的参数。</span><br><span class="line">├── package.json    # 应用程序的信息。</span><br><span class="line">├── scaffolds    # 模版文件夹。新建文章时，Hexo会根据 scaffold 来建立文件。</span><br><span class="line">├── source    # 资源文件夹是存放用户资源的地方</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes    # 主题文件夹。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure><h4 id="Hexo基本配置"><a href="#Hexo基本配置" class="headerlink" title="Hexo基本配置"></a>Hexo基本配置</h4><p>在blog目录下，_config.yml中为用户可以自定义的配置，我们可以从<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo官网</a>了解各个参数的意义。<br>下面列出我搭建时的修改项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Shadowless</span><br><span class="line">subtitle: 备忘录</span><br><span class="line">description: 求知若饥，虚心若愚</span><br><span class="line">keywords: blog</span><br><span class="line">author: Shadowless</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">网站标题</td></tr><tr><td style="text-align:left">subtitle</td><td style="text-align:left">网站副标题</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">网站描述</td></tr><tr><td style="text-align:left">author</td><td style="text-align:left">您的名字</td></tr><tr><td style="text-align:left">language</td><td style="text-align:left">网站使用的语言，如：zh-CN</td></tr><tr><td style="text-align:left">timezone</td><td style="text-align:left">网站时区。Hexo 默认使用您电脑的时区。如：Asia/Shanghai</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://shadowless.top</span><br><span class="line">root: /</span><br><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :category/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">url</td><td style="text-align:left">网址</td><td style="text-align:left">　</td></tr><tr><td style="text-align:left">root</td><td style="text-align:left">网站根目录</td><td style="text-align:left">　</td></tr><tr><td style="text-align:left">permalink</td><td style="text-align:left">文章的永久链接格式</td><td style="text-align:left">:year/:month/:day/:title/</td></tr><tr><td style="text-align:left">permalink_defaults</td><td style="text-align:left">永久链接中各部分的默认值</td><td style="text-align:left">　</td></tr></tbody></table><p>以上参数自定义完成后可以执行<code>hexo g</code>生成静态页面<br><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605102944249.png" alt=""></p><p>然后输入命令<code>hexo s --debug</code>，以debug模式启动hexo的server模块</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103346674.png" alt=""></p><p>待启动成功后可以使用浏览器输入本地回环地址<code>http://localhost:4000/</code> or <code>http://127.0.0.1:4000/</code>访问你所创建的博客页面。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103708454.png" alt=""></p><p>以上基本配置已经完成，接下来我们来学习一下文章的创建，主题的配置，以及将本地搭建完成的博客部署到gitgub。</p><h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>我们可以使用 <code>hexo new post “文章名”</code>来新建一篇文章<br><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605104559869.png" alt=""><br>新建的内容会在<code>blog/source/_posts/</code>目录中，由你指定的文章名命名，后缀为<code>.md</code>。<br>我们可以直接使用markdown语法编写该文件。</p><h2 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h2><h3 id="Github账户与仓库配置"><a href="#Github账户与仓库配置" class="headerlink" title="Github账户与仓库配置"></a>Github账户与仓库配置</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>首先我们打开<a href="https://github.com/" target="_blank" rel="noopener">“全球最大同性交友网站gayhub”</a>，然后注册一个账户。</p><p>登录账户，在网页上方状态栏找到一个加号，点击New repository。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105321620.png" alt=""></p><p>接下来会让你填写仓库名称，这里需要填写的格式为：<code>用户名.github.io</code>。<br>如图所示，设置为public仓库，可以不用README初始化仓库，也可以不添加.gitignore和license。<br>然后点击下方<code>Create repository</code>即可。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105605162.png" alt=""></p><p>完成后我们会跳转至该仓库，在该页会有在本地添加远程仓库的指导以及HTTPS和SSH链接。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110157400.png" alt=""></p><h4 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h4><p>我们选择使用ssh进行部署。需要生成一对ssh认证的密钥，然后将公钥添加到你的github账户。</p><p>分为如下步骤:</p><ul><li>检查SSH keys是否存在</li><li>生成新的ssh key</li><li>将ssh key添加到GitHub中</li></ul><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110650809.png" alt=""></p><ol><li><p>keys所在目录为<code>~/.ssh/</code>中，检查目标文件<code>id_rsa</code>, <code>id_rsa.pub</code>是否存在。<img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110828788.png" alt=""></p></li><li><p>若文件不存在，我们需要重新生成密钥。<br>在命令行中输入<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>，为了方便可以一路按回车，不需要输入其他内容，默认会在相应路径下（/your_home_path）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># Creates a new ssh key using the provided email</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/your_home_path/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></li><li><p>将新生成的key添加到ssh-agent中:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">Agent pid 59566</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ol><p>将ssh key添加到GitHub中:</p><ul><li><p>打开Github，点击右上角加号，选择Settings</p><p>  <img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605112652130.png" alt=""></p></li><li><p>选择左侧一列中<code>SSH and GPG keys</code>。</p></li><li>选择<code>New SSH key</code>。</li><li>打开本地<code>~/.ssh/id_rsa.pub</code>文件将其中内容复制出来，粘贴到github页面key的输入框中。</li><li>点击 add SSH Key完成添加</li></ul><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开博客根目录下的<code>_config.yml</code>配置文件，找到deploy一栏，按照如下模板填写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你github仓库的SSH链接</span><br><span class="line">  branch: master</span><br><span class="line">  message: update my blog</span><br></pre></td></tr></table></figure><h4 id="将博客部署到远程"><a href="#将博客部署到远程" class="headerlink" title="将博客部署到远程"></a>将博客部署到远程</h4><p>首先我们需要生成网页的静态文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><p>然后使用命令将生成的静态文件PUSH到github远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>等待完成后可以访问<code>你的用户名.github.io</code>来进入博客了。</p><p>每次更新文章后都可以使用<code>hexo generate</code>生成静态文件，再<code>hexo deploy</code>将其push到github。</p><div class="note info"><p>后续会增加关于<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题</a>的配置</p></div><a class="btn" href="http://shadowless.top" title="title"><i class="fa fa-icon button"></i>HOME</a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Hexo与Gitpages搭建博客&quot;&gt;&lt;a href=&quot;#使用Hexo与Gitpages搭建博客&quot; class=&quot;headerlink&quot; title=&quot;使用Hexo与Gitpages搭建博客&quot;&gt;&lt;/a&gt;使用Hexo与Gitpages搭建博客&lt;/h1&gt;&lt;p&gt;一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。&lt;/p&gt;
&lt;p&gt;各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。&lt;/p&gt;
&lt;h2 id=&quot;搭建本地Hexo运行环境&quot;&gt;&lt;a href=&quot;#搭建本地Hexo运行环境&quot; class=&quot;headerlink&quot; title=&quot;搭建本地Hexo运行环境&quot;&gt;&lt;/a&gt;搭建本地Hexo运行环境&lt;/h2&gt;&lt;p&gt;我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。&lt;/p&gt;
&lt;h3 id=&quot;了解Hexo&quot;&gt;&lt;a href=&quot;#了解Hexo&quot; class=&quot;headerlink&quot; title=&quot;了解Hexo&quot;&gt;&lt;/a&gt;了解Hexo&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==&quot; title=&quot;Hexo官网&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; Hexo&lt;/span&gt;
&lt;h3 id=&quot;Git版本管理工具安装&quot;&gt;&lt;a href=&quot;#Git版本管理工具安装&quot; class=&quot;headerlink&quot; title=&quot;Git版本管理工具安装&quot;&gt;&lt;/a&gt;Git版本管理工具安装&lt;/h3&gt;&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：下载并安装 &lt;a href=&quot;https://git-scm.com/download/win&quot; title=&quot;下载git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;Mac：使用 &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Homebrew&lt;/a&gt;, &lt;a href=&quot;http://www.macports.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MacPorts&lt;/a&gt; ：&lt;code&gt;brew install git&lt;/code&gt;；或下载 &lt;a href=&quot;http://sourceforge.net/projects/git-osx-installer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装程序&lt;/a&gt; 安装。&lt;/li&gt;
&lt;li&gt;Linux (Ubuntu, Debian)：&lt;code&gt;sudo apt-get install git-core&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux (Fedora, Red Hat, CentOS)：&lt;code&gt;sudo yum install git-core&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt; Windows用户　&lt;/strong&gt;&lt;br&gt;由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。&lt;br&gt;或者可以参考这里&lt;a href=&quot;https://github.com/waylau/git-for-win&quot; title=&quot;git for windows下载&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git for Windows 国内下载站&lt;/a&gt;。&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;如果想学习Git的使用，推荐一下廖老师的教程　&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDA=&quot; title=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; 廖雪峰的官方网站&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;Node-js环境搭建&quot;&gt;&lt;a href=&quot;#Node-js环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Node.js环境搭建&quot;&gt;&lt;/a&gt;Node.js环境搭建&lt;/h3&gt;&lt;p&gt;由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。&lt;/p&gt;
&lt;h4 id=&quot;了解Node-js&quot;&gt;&lt;a href=&quot;#了解Node-js&quot; class=&quot;headerlink&quot; title=&quot;了解Node.js&quot;&gt;&lt;/a&gt;了解Node.js&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。&lt;br&gt;Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;br&gt;Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL25vZGVqcy5jbi8=&quot; title=&quot;Node.js官网&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; Node&lt;/span&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://shadowless.top/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://shadowless.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://shadowless.top/other/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://shadowless.top/other/第一篇文章/</id>
    <published>2018-05-31T12:25:00.000Z</published>
    <updated>2018-06-05T16:28:05.536Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。</p><p>先记录一下搭建时参考的教程吧：<br>    1.首先时hexo的官方文档<br>    <code>https://hexo.io/zh-cn/docs/</code><br>    2.接下来时NexT主题的相关配置<br>    <code>https://www.jianshu.com/p/3ff20be8574c</code></p><p>后面我也会总结一下自己的搭建过程。</p><p><em>顺便测试一下图床</em><br><br><a href="http://portal.qiniu.com" target="_blank" rel="noopener"><em>七牛云</em></a><br><img src="http://p9lal5uqx.bkt.clouddn.com/blog/first_blog-2018-5-31.png" alt="blog/first_blog-2018-5-31.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。&lt;/p&gt;
&lt;p&gt;先记录一下搭建时参考的教程吧：&lt;br&gt;    1.首先时hexo的官方文档&lt;br&gt;    &lt;code&gt;https://hexo.io/zh-
      
    
    </summary>
    
      <category term="other" scheme="http://shadowless.top/categories/other/"/>
    
    
      <category term="other" scheme="http://shadowless.top/tags/other/"/>
    
  </entry>
  
</feed>
