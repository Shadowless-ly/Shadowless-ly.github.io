{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/timg.jpeg","path":"images/timg.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/timg16x16.png","path":"images/timg16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/timg32x32.png","path":"images/timg32x32.png","modified":0,"renderable":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"source/images/1471380810.jpg","path":"images/1471380810.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","path":"lib/needsharebutton/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/README.md","path":"lib/needsharebutton/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/timg(已去底).jpeg","path":"images/timg(已去底).jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085544},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1528216085544},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1528216085544},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1528216085544},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1528216085544},{"_id":"themes/next/.stickler.yml","hash":"b7939095038cbdc4883fc10950e163a60a643b43","modified":1528216085544},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1528216085544},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1528216085544},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1528216085544},{"_id":"themes/next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1528216085544},{"_id":"themes/next/_config.yml","hash":"a4065296268ec686e5bdf2224f9ffc20c08eb148","modified":1528216085544},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1528216085544},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1528216085544},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1528216085548},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1528216085544},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1528216085544},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1528216085544},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1528216085544},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1528216085544},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1528216085544},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1528216085544},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1528216085544},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1528216085544},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1528216085544},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1528216085544},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1528216085544},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1528216085544},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1528216085544},{"_id":"themes/next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1528216085548},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1528216085548},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1528216085548},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1528216085544},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1528216085544},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1528216085556},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1528216085556},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1528216085556},{"_id":"source/CNAME","hash":"0c76748bbc095c1cd73cdbd1d78e0862f1a22ce1","modified":1528216085536},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1528216085544},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1528216085544},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1528216085544},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1528216085544},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1528216085544},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1528216085544},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1528216085544},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1528216085544},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1528216085544},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1528216085544},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1528216085544},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1528216085544},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1528216085544},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1528216085544},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1528216085544},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1528216085544},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1528216085544},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1528216085548},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1528216085548},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1528216085548},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1528216085548},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1528216085548},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1528216085548},{"_id":"themes/next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1528216085548},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085552},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1528216085544},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1528216085544},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1528216085544},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1528216085544},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1528216085544},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1528216085544},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1528216085548},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1528216085548},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1528216085548},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1528216085548},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1528216085548},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1528216085548},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1528216085548},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1528216085548},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1528216085548},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1528216085548},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1528216085544},{"_id":"themes/next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1528216085544},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1528216085544},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1528216085544},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1528216085544},{"_id":"themes/next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1528216085544},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1528216085544},{"_id":"source/404/index.md","hash":"4fb59fc49d6ce382f52195ce2a90de16bebc7278","modified":1528216085536},{"_id":"source/_posts/python使用sys-stdin与fileinput获取标准输入.md","hash":"def74c416664a87306d286572caccb5632bdb6c0","modified":1528561106271},{"_id":"source/_posts/第一篇文章.md","hash":"abba60608ab3acdd1c12bbd794a24d3e8090c0d1","modified":1528216085536},{"_id":"source/categories/index.md","hash":"433c1b0db9751b813cf2c89785dc9459a095bb86","modified":1528216085536},{"_id":"source/_posts/使用Hexo与Gitpages搭建博客.md","hash":"6ff0c5c724886797597c89509ac631256ca677fd","modified":1528217780445},{"_id":"source/tags/index.md","hash":"55fafd7f9a5c09ec3d2edc63e841f8956eef3a8b","modified":1528216085540},{"_id":"source/images/timg.jpeg","hash":"083f1d014092bf157c6785f76f0562cb6cbcecc3","modified":1528216085540},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1528216085544},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528216085544},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528216085544},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"9b45abd2f1942295f00d0f35312791629a9d5417","modified":1528216085548},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1528216085548},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"05e67c50a4f3a20fad879ed61b890de8ca6ba4ea","modified":1528216085548},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1528216085548},{"_id":"themes/next/layout/_macro/post.swig","hash":"2ebb25a6f28bda46ecd5a11600042344aecc7dd4","modified":1528216085548},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1528216085548},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1528216085548},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1528216085548},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1527604753136},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1528216085548},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1528216085548},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528216085552},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ae77b6a369f83c9986408f2ab448090e37cd2dc","modified":1528216085548},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528216085552},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1528216085548},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528216085552},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1528216085548},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528216085552},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528216085552},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528216085552},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528216085552},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528216085552},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528216085552},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528216085552},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528216085552},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528216085552},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528216085552},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528216085552},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528216085552},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528216085552},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528216085552},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528216085552},{"_id":"themes/next/source/images/timg16x16.png","hash":"dc0f7f3d8d8c7b129e2114cfa58cc8780c3ac785","modified":1528216085552},{"_id":"themes/next/source/images/timg32x32.png","hash":"d784f24565d7f2512fc0139441e2fade229417ba","modified":1528216085552},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1528216085548},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1528216085548},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1528216085548},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1528216085548},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1528216085548},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1528216085548},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1528216085548},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1528216085548},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1528216085548},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1528216085548},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1528216085548},{"_id":"source/images/avatar.jpg","hash":"649ab787b62cd1f72e62138a848789af0931c7f5","modified":1528216085536},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1528216085548},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1528216085548},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085552},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085552},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085552},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085548},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085548},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1528216085552},{"_id":"source/images/1471380810.jpg","hash":"e1427f4b3e63094c3f013a084cce162f00729ed4","modified":1528216085536},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085552},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528216085552},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1528216085548},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1528216085548},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1528216085548},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1528216085548},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1528216085548},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1528216085548},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1528216085548},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1528216085548},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1528216085548},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1528216085548},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1528216085548},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1528216085548},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1528216085548},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1528216085548},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1528216085548},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1528216085548},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528216085552},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528216085552},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528216085552},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528216085552},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1528216085552},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1528216085552},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1528216085552},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1528216085548},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528216085552},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528216085552},{"_id":"themes/next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1528216085552},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1528216085552},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1528216085552},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"258d94a6f08a9d8b2c0d3172580ceb0db44854b8","modified":1528216085552},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1528216085552},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1528216085548},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1528216085548},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1528216085556},{"_id":"themes/next/source/lib/needsharebutton/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1528216085556},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"4688ab516edbd7278f0da58d0dc5a3ec73263e89","modified":1528216085556},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"d55ca3e2f697395fb9b1ac9d9166d23258a85438","modified":1528216085556},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1528216085556},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528216085556},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1528216085556},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1528216085556},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1528216085556},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1528216085556},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"174678a8e2a24763e3fe8b9c25496fdf6ee0220b","modified":1528216085556},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"98af8d99819882904f9b1a9254bebf40602e1843","modified":1528216085556},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528216085556},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528216085556},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528216085556},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528216085556},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1528216085552},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1528216085552},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1528216085548},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528216085552},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1528216085548},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1528216085552},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1528216085548},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1528216085548},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1528216085548},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1528216085548},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1528216085548},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1528216085548},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1528216085548},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1528216085548},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1528216085548},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1528216085548},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1528216085548},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1528216085548},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1528216085548},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1528216085548},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1528216085548},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1528216085552},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1528216085552},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1528216085552},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1528216085552},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528216085556},{"_id":"source/images/timg(已去底).jpeg","hash":"9889a952c45252259a443037b3931c8bdd8c9dd1","modified":1528216085540},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1528216085552},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1528216085548},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1528216085552},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1528216085552},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1528216085552},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1528216085552},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1528216085552},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1528216085552},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528216085556},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528216085556},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1528216085548},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1528216085548},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528216085556},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528216085552},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528216085552},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528216085552},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528216085552},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"c32511f699c6ecc12392ccc7c2b94e0b2173f495","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528216085552},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1528216085548},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1528216085552},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1528216085548},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1528216085548},{"_id":"public/atom.xml","hash":"463bb60547c8cc58c0db4e040bfb05954e17b6b4","modified":1528561182701},{"_id":"public/search.xml","hash":"bd54cbc277f5aa0beb29c82b71a92bd34fc7d442","modified":1528561182701},{"_id":"public/404.html","hash":"905189d8dd10cff5e09f4ae864bd997f8565f953","modified":1528561183723},{"_id":"public/python/python使用sys-stdin与fileinput获取标准输入/index.html","hash":"83e5f0d6dec891467701b760dc7ad17f90d2ca17","modified":1528561183850},{"_id":"public/categories/index.html","hash":"1c29710b20accae810c0130303ee801f8f873716","modified":1528561183851},{"_id":"public/tags/index.html","hash":"a2eebc7775a97da6670e0c625ab4fd1530ef54eb","modified":1528561183851},{"_id":"public/other/第一篇文章/index.html","hash":"c335897b93f59dc00ef7a8896b5ca108b99930a7","modified":1528561183851},{"_id":"public/archives/index.html","hash":"3694a44724a9a9f3bd5118939905d8b3ba1bee86","modified":1528561183851},{"_id":"public/hexo/使用Hexo与Gitpages搭建博客/index.html","hash":"f62ae6b71d5ea84757249b3fe4201d4380fede7e","modified":1528561183851},{"_id":"public/categories/other/index.html","hash":"ca8a837452ecbfb9e36100de8acae7cad391d21f","modified":1528561183851},{"_id":"public/categories/hexo/index.html","hash":"35d90c13a8428858ffc9c80ab79ee1bb49805a26","modified":1528561183851},{"_id":"public/archives/2018/index.html","hash":"2f3dbf1ea34695978a612a4272c2532637fb5544","modified":1528561183851},{"_id":"public/archives/2018/06/index.html","hash":"76d12f8e782ccf88d04788168396dfca9941948b","modified":1528561183851},{"_id":"public/index.html","hash":"a8be5fc2b80ac5290b76281522c8bcc967ae36e7","modified":1528561183852},{"_id":"public/archives/2018/05/index.html","hash":"c2f562cea5623f36d47620d102a7daddb033297c","modified":1528561183852},{"_id":"public/tags/other/index.html","hash":"57a696944a8ff98177c6ef3bbf46d8a213140c22","modified":1528561183852},{"_id":"public/tags/hexo/index.html","hash":"a132353f736cb0d73c4597db42175a4921b0161d","modified":1528561183852},{"_id":"public/categories/python/index.html","hash":"49999e15009b7c607266b2d48e8eba0efda9cc05","modified":1528561183853},{"_id":"public/tags/python/index.html","hash":"95f4186284b855c14c3625b5efe84b402bee497d","modified":1528561183853},{"_id":"public/tags/linux/index.html","hash":"6bd56194fa8b6eb74168e94403c56823034785ff","modified":1528561183853}],"Category":[{"name":"other","_id":"cji7duumi0006s70uqqh63lpq"},{"name":"hexo","_id":"cji7duumm0008s70u6rc2a3rc"},{"name":"python","_id":"cji7f7y9t000is70u1ve6t8j7"}],"Data":[],"Page":[{"title":"","date":"2018-05-30T15:40:33.000Z","comments":0,"_content":"\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404/index.md","raw":"---\ntitle: #404 Not Found: 该页无法显示\ndate: 2018-05-30 23:40:33\ncomments: false\npermalink: /404\n---\n\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","updated":"2018-06-05T16:28:05.536Z","path":"/404.html","layout":"page","_id":"cji7duum10000s70ud8osb9ia","content":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><br>  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br>  <meta name=\"robots\" content=\"all\"><br>  <meta name=\"robots\" content=\"index,follow\"><br>  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"><br></head><br><body><br>  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"><br>  </script><br>  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><br>  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script><br></body><br></html>\n","site":{"data":{}},"excerpt":"","more":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><br>  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br>  <meta name=\"robots\" content=\"all\"><br>  <meta name=\"robots\" content=\"index,follow\"><br>  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"><br></head><br><body><br>  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"><br>  </script><br>  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><br>  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script><br></body><br></html>\n"},{"title":"分类","date":"2018-05-30T12:31:16.000Z","categories":"Testing","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-05-30 20:31:16\ncategories: Testing\ntype: \"categories\"\n---\n","updated":"2018-06-05T16:28:05.536Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cji7duumb0002s70u7qt2vhg8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-05-30T12:34:31.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-05-30 20:34:31\ntype: \"tags\"\n---\n","updated":"2018-06-05T16:28:05.540Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cji7duumf0004s70u0g4am74e","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"python使用sys.stdin与fileinput获取标准输入","comments":1,"date":"2018-06-08T11:15:14.000Z","update":"2018-06-08T11:15:14.000Z","top":null,"_content":"\n> Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。\n\n# stdin\nPython的标准库`sys`提供了三个文件描述符:\n\n|标准输入|标准输出|错误输出|\n|:-:|:-:|:-:|\n|stdin|stdout|stderr|\n\n\n以下例子是获取标准输入，然后写入到标准输入。\n```python read_stdin.py\nimport sys\n\nfor line in sys.stdin:\n    sys.stdout.write(line)\n\n```\n\n接下来我们可以在命令行使用该脚本。\n```bash\n$ cat /etc/passwd | python read_stdin.py\n$ python read_stdin.py < /etc/passwd\n$ python read_stdin.py -\n```\n\n`sys.stdin`为文件描述符，故拥有文件对象的方法，我们可以使用`read()`方法读取标准输入的所有内容，或者使用`readlines()`将标准输入内容读取到一个`list`中。\n\n```python upper.py\nimport sys\n\ndef get_upper_list():\n    content_list =  sys.stdin.readlines()\n    return [i.upper() for i in content_list]\n\nfor line in get_upper_list():\n    sys.stdout.write(line)\n\n```\n上述脚本中定义了`get_content()`函数，该函数使用`sys.stdin`标准输入的`readlines()`方法读取所有行，以列表类型保存于`content_list`，使用列表解析，调用每个元素(字符串类型)的`upper()`方法，构造一个新的列表并返回。\n迭代`get_upper_list()`函数返回的新列表，将每一行写入标准输入。\n\n该脚本运行效果如下：\n![](http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609095401158.png)\n\n利用`sys.stdin`，我们几乎可以不再使用`awk`。将Python与Linux管道结合，可以充分发挥Python语言的文字处理能力。\n\n# fileinput\n\n对于`awk`，它可以同时处理多个文件，在Python中我们可以使用`fileinput`这个标准库来达到同样效果。\n`fileinput`比`sys.stdin`更为通用，它可以遍历`sys.argv[1:]`列表(所有命令行参数)中的文件，如果该列表为空(没有提供文件名参数)，则默认读取标准输入的内容。\n\n```python read_from_fileinput.py\nimport fileinput\n\nfor line in fileinput.input():\n    print(line, end=\"\")\n```\n上述脚本直接调用了fileinput模块的input函数，该函数返回一个FileInput实例化的可迭代对象，可以使用for循环遍历取得每一行内容。fileinput既可以从标准输入读取数据，也可以从文件中(一个或多个)读取数据。\n```bash\n$ python read_from_fileinput.py -  # 从标准输入读取数据\n$ cat /etc/passwd | python read_from_fileinput.py  # 通过管道读取passwd数据\n$ python read_from_fileinput.py < /etc/passwd  # 通过重定向读取passwd数据\n$ python read_from_fileinput.py /etc/passwd  # 直接读取passwd文件数据\n$ python read_from_fileinput.py /etc/passwd /etc/hosts  # 直接读取passwd与hosts文件数据\n\n```\nfileinput还提供了一些方法让我们知道当前读取的内容属于哪一个文件等便利的方法，常用方法如下：\n* `filename`: 当前正在读取文件的文件名 str\n* `fileno`: 文件的描述符 int\n* `filelineno`: 正在读取的行时当前文件的第几行 int\n* `isfirstline`: 正在读取的行是否是当前文件的第一行 bool\n* `isstdin`: 正在读的问价是否时从标准输入读取的 bool\n* `nextfile`: 关闭当前正在读取的文件，从下一个文件第一行开始 None\n\n我们可以完成一个简单的脚本来展示一下fileinput的各个方法：\n\n```python read_file.py\nimport fileinput\n\nfor line in fileinput.input():\n    meta = [\"文件名:\" + str(fileinput.filename()),\n    \" 文件描述符:\" + str(fileinput.fileno()),\n    \" 行号:\" + str(fileinput.filelineno()),\n    \" 首行:\" + str(fileinput.isfirstline()),\n    \" 标准输入:\" + str(fileinput.isstdin()) + \" \"]\n    meta_ljust = [i.ljust(9) for i in meta]\n    print(*meta_ljust, end=\"\")\n    print(line, end=\"\")\n\n```\n\n![](http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609114727921.png)\n\n同时fileinput还提供了钩子函数，可以帮助去自定义文件访问的方式：\nfileinput内置了两个函数：\n`hook_compressed`: 识别并打开`.gz`和`.bz2`的压缩文件\n`hook_encoded`: 以特定的编码格式打开文件\n\n读取一个`.gz`压缩文件，如下所示：\n```python read_compressed.py\nimport fileinput\n\nfor line in fileinput.input(openhook=fileinput.hook_compressed):\n    print(line.decode('utf-8'), end=\"\")\n\n```\n![](http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180610121207368.png)\n\n在中文windows下有读取utf-8,或在linux下读取gbk需要指定对应的编码格式，如下所示：\n\n```python read_encoded.py\nimport fileinput\n\nfor line in fileinput.input(openhook=fileinput.hook_encoded(encoding=\"gbk\")):\n    print(line, end=\"\")\n\n```\n","source":"_posts/python使用sys-stdin与fileinput获取标准输入.md","raw":"---\ntitle: python使用sys.stdin与fileinput获取标准输入\ncomments: true\ndate: 2018-06-08 19:15:14\nupdate: 2018-06-08 19:15:14\ntag: [\"python\", \"linux\"]\ncategories: python\ntop:\n---\n\n> Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。\n\n# stdin\nPython的标准库`sys`提供了三个文件描述符:\n\n|标准输入|标准输出|错误输出|\n|:-:|:-:|:-:|\n|stdin|stdout|stderr|\n\n\n以下例子是获取标准输入，然后写入到标准输入。\n```python read_stdin.py\nimport sys\n\nfor line in sys.stdin:\n    sys.stdout.write(line)\n\n```\n\n接下来我们可以在命令行使用该脚本。\n```bash\n$ cat /etc/passwd | python read_stdin.py\n$ python read_stdin.py < /etc/passwd\n$ python read_stdin.py -\n```\n\n`sys.stdin`为文件描述符，故拥有文件对象的方法，我们可以使用`read()`方法读取标准输入的所有内容，或者使用`readlines()`将标准输入内容读取到一个`list`中。\n\n```python upper.py\nimport sys\n\ndef get_upper_list():\n    content_list =  sys.stdin.readlines()\n    return [i.upper() for i in content_list]\n\nfor line in get_upper_list():\n    sys.stdout.write(line)\n\n```\n上述脚本中定义了`get_content()`函数，该函数使用`sys.stdin`标准输入的`readlines()`方法读取所有行，以列表类型保存于`content_list`，使用列表解析，调用每个元素(字符串类型)的`upper()`方法，构造一个新的列表并返回。\n迭代`get_upper_list()`函数返回的新列表，将每一行写入标准输入。\n\n该脚本运行效果如下：\n![](http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609095401158.png)\n\n利用`sys.stdin`，我们几乎可以不再使用`awk`。将Python与Linux管道结合，可以充分发挥Python语言的文字处理能力。\n\n# fileinput\n\n对于`awk`，它可以同时处理多个文件，在Python中我们可以使用`fileinput`这个标准库来达到同样效果。\n`fileinput`比`sys.stdin`更为通用，它可以遍历`sys.argv[1:]`列表(所有命令行参数)中的文件，如果该列表为空(没有提供文件名参数)，则默认读取标准输入的内容。\n\n```python read_from_fileinput.py\nimport fileinput\n\nfor line in fileinput.input():\n    print(line, end=\"\")\n```\n上述脚本直接调用了fileinput模块的input函数，该函数返回一个FileInput实例化的可迭代对象，可以使用for循环遍历取得每一行内容。fileinput既可以从标准输入读取数据，也可以从文件中(一个或多个)读取数据。\n```bash\n$ python read_from_fileinput.py -  # 从标准输入读取数据\n$ cat /etc/passwd | python read_from_fileinput.py  # 通过管道读取passwd数据\n$ python read_from_fileinput.py < /etc/passwd  # 通过重定向读取passwd数据\n$ python read_from_fileinput.py /etc/passwd  # 直接读取passwd文件数据\n$ python read_from_fileinput.py /etc/passwd /etc/hosts  # 直接读取passwd与hosts文件数据\n\n```\nfileinput还提供了一些方法让我们知道当前读取的内容属于哪一个文件等便利的方法，常用方法如下：\n* `filename`: 当前正在读取文件的文件名 str\n* `fileno`: 文件的描述符 int\n* `filelineno`: 正在读取的行时当前文件的第几行 int\n* `isfirstline`: 正在读取的行是否是当前文件的第一行 bool\n* `isstdin`: 正在读的问价是否时从标准输入读取的 bool\n* `nextfile`: 关闭当前正在读取的文件，从下一个文件第一行开始 None\n\n我们可以完成一个简单的脚本来展示一下fileinput的各个方法：\n\n```python read_file.py\nimport fileinput\n\nfor line in fileinput.input():\n    meta = [\"文件名:\" + str(fileinput.filename()),\n    \" 文件描述符:\" + str(fileinput.fileno()),\n    \" 行号:\" + str(fileinput.filelineno()),\n    \" 首行:\" + str(fileinput.isfirstline()),\n    \" 标准输入:\" + str(fileinput.isstdin()) + \" \"]\n    meta_ljust = [i.ljust(9) for i in meta]\n    print(*meta_ljust, end=\"\")\n    print(line, end=\"\")\n\n```\n\n![](http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609114727921.png)\n\n同时fileinput还提供了钩子函数，可以帮助去自定义文件访问的方式：\nfileinput内置了两个函数：\n`hook_compressed`: 识别并打开`.gz`和`.bz2`的压缩文件\n`hook_encoded`: 以特定的编码格式打开文件\n\n读取一个`.gz`压缩文件，如下所示：\n```python read_compressed.py\nimport fileinput\n\nfor line in fileinput.input(openhook=fileinput.hook_compressed):\n    print(line.decode('utf-8'), end=\"\")\n\n```\n![](http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180610121207368.png)\n\n在中文windows下有读取utf-8,或在linux下读取gbk需要指定对应的编码格式，如下所示：\n\n```python read_encoded.py\nimport fileinput\n\nfor line in fileinput.input(openhook=fileinput.hook_encoded(encoding=\"gbk\")):\n    print(line, end=\"\")\n\n```\n","slug":"python使用sys-stdin与fileinput获取标准输入","published":1,"updated":"2018-06-09T16:18:26.271Z","_id":"cji7duum40001s70up4vqmhme","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。</p>\n</blockquote>\n<h1 id=\"stdin\"><a href=\"#stdin\" class=\"headerlink\" title=\"stdin\"></a>stdin</h1><p>Python的标准库<code>sys</code>提供了三个文件描述符:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标准输入</th>\n<th style=\"text-align:center\">标准输出</th>\n<th style=\"text-align:center\">错误输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">stdin</td>\n<td style=\"text-align:center\">stdout</td>\n<td style=\"text-align:center\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>以下例子是获取标准输入，然后写入到标准输入。<br><figure class=\"highlight python\"><figcaption><span>read_stdin.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</span><br><span class=\"line\">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们可以在命令行使用该脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/passwd | python read_stdin.py</span><br><span class=\"line\">$ python read_stdin.py &lt; /etc/passwd</span><br><span class=\"line\">$ python read_stdin.py -</span><br></pre></td></tr></table></figure></p>\n<p><code>sys.stdin</code>为文件描述符，故拥有文件对象的方法，我们可以使用<code>read()</code>方法读取标准输入的所有内容，或者使用<code>readlines()</code>将标准输入内容读取到一个<code>list</code>中。</p>\n<figure class=\"highlight python\"><figcaption><span>upper.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_upper_list</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    content_list =  sys.stdin.readlines()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [i.upper() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> content_list]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> get_upper_list():</span><br><span class=\"line\">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure>\n<p>上述脚本中定义了<code>get_content()</code>函数，该函数使用<code>sys.stdin</code>标准输入的<code>readlines()</code>方法读取所有行，以列表类型保存于<code>content_list</code>，使用列表解析，调用每个元素(字符串类型)的<code>upper()</code>方法，构造一个新的列表并返回。<br>迭代<code>get_upper_list()</code>函数返回的新列表，将每一行写入标准输入。</p>\n<p>该脚本运行效果如下：<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609095401158.png\" alt=\"\"></p>\n<p>利用<code>sys.stdin</code>，我们几乎可以不再使用<code>awk</code>。将Python与Linux管道结合，可以充分发挥Python语言的文字处理能力。</p>\n<h1 id=\"fileinput\"><a href=\"#fileinput\" class=\"headerlink\" title=\"fileinput\"></a>fileinput</h1><p>对于<code>awk</code>，它可以同时处理多个文件，在Python中我们可以使用<code>fileinput</code>这个标准库来达到同样效果。<br><code>fileinput</code>比<code>sys.stdin</code>更为通用，它可以遍历<code>sys.argv[1:]</code>列表(所有命令行参数)中的文件，如果该列表为空(没有提供文件名参数)，则默认读取标准输入的内容。</p>\n<figure class=\"highlight python\"><figcaption><span>read_from_fileinput.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input():</span><br><span class=\"line\">    print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n<p>上述脚本直接调用了fileinput模块的input函数，该函数返回一个FileInput实例化的可迭代对象，可以使用for循环遍历取得每一行内容。fileinput既可以从标准输入读取数据，也可以从文件中(一个或多个)读取数据。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python read_from_fileinput.py -  <span class=\"comment\"># 从标准输入读取数据</span></span><br><span class=\"line\">$ cat /etc/passwd | python read_from_fileinput.py  <span class=\"comment\"># 通过管道读取passwd数据</span></span><br><span class=\"line\">$ python read_from_fileinput.py &lt; /etc/passwd  <span class=\"comment\"># 通过重定向读取passwd数据</span></span><br><span class=\"line\">$ python read_from_fileinput.py /etc/passwd  <span class=\"comment\"># 直接读取passwd文件数据</span></span><br><span class=\"line\">$ python read_from_fileinput.py /etc/passwd /etc/hosts  <span class=\"comment\"># 直接读取passwd与hosts文件数据</span></span><br></pre></td></tr></table></figure></p>\n<p>fileinput还提供了一些方法让我们知道当前读取的内容属于哪一个文件等便利的方法，常用方法如下：</p>\n<ul>\n<li><code>filename</code>: 当前正在读取文件的文件名 str</li>\n<li><code>fileno</code>: 文件的描述符 int</li>\n<li><code>filelineno</code>: 正在读取的行时当前文件的第几行 int</li>\n<li><code>isfirstline</code>: 正在读取的行是否是当前文件的第一行 bool</li>\n<li><code>isstdin</code>: 正在读的问价是否时从标准输入读取的 bool</li>\n<li><code>nextfile</code>: 关闭当前正在读取的文件，从下一个文件第一行开始 None</li>\n</ul>\n<p>我们可以完成一个简单的脚本来展示一下fileinput的各个方法：</p>\n<figure class=\"highlight python\"><figcaption><span>read_file.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input():</span><br><span class=\"line\">    meta = [<span class=\"string\">\"文件名:\"</span> + str(fileinput.filename()),</span><br><span class=\"line\">    <span class=\"string\">\" 文件描述符:\"</span> + str(fileinput.fileno()),</span><br><span class=\"line\">    <span class=\"string\">\" 行号:\"</span> + str(fileinput.filelineno()),</span><br><span class=\"line\">    <span class=\"string\">\" 首行:\"</span> + str(fileinput.isfirstline()),</span><br><span class=\"line\">    <span class=\"string\">\" 标准输入:\"</span> + str(fileinput.isstdin()) + <span class=\"string\">\" \"</span>]</span><br><span class=\"line\">    meta_ljust = [i.ljust(<span class=\"number\">9</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> meta]</span><br><span class=\"line\">    print(*meta_ljust, end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609114727921.png\" alt=\"\"></p>\n<p>同时fileinput还提供了钩子函数，可以帮助去自定义文件访问的方式：<br>fileinput内置了两个函数：<br><code>hook_compressed</code>: 识别并打开<code>.gz</code>和<code>.bz2</code>的压缩文件<br><code>hook_encoded</code>: 以特定的编码格式打开文件</p>\n<p>读取一个<code>.gz</code>压缩文件，如下所示：<br><figure class=\"highlight python\"><figcaption><span>read_compressed.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input(openhook=fileinput.hook_compressed):</span><br><span class=\"line\">    print(line.decode(<span class=\"string\">'utf-8'</span>), end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180610121207368.png\" alt=\"\"></p>\n<p>在中文windows下有读取utf-8,或在linux下读取gbk需要指定对应的编码格式，如下所示：</p>\n<figure class=\"highlight python\"><figcaption><span>read_encoded.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input(openhook=fileinput.hook_encoded(encoding=<span class=\"string\">\"gbk\"</span>)):</span><br><span class=\"line\">    print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。</p>\n</blockquote>\n<h1 id=\"stdin\"><a href=\"#stdin\" class=\"headerlink\" title=\"stdin\"></a>stdin</h1><p>Python的标准库<code>sys</code>提供了三个文件描述符:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标准输入</th>\n<th style=\"text-align:center\">标准输出</th>\n<th style=\"text-align:center\">错误输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">stdin</td>\n<td style=\"text-align:center\">stdout</td>\n<td style=\"text-align:center\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>以下例子是获取标准输入，然后写入到标准输入。<br><figure class=\"highlight python\"><figcaption><span>read_stdin.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</span><br><span class=\"line\">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们可以在命令行使用该脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/passwd | python read_stdin.py</span><br><span class=\"line\">$ python read_stdin.py &lt; /etc/passwd</span><br><span class=\"line\">$ python read_stdin.py -</span><br></pre></td></tr></table></figure></p>\n<p><code>sys.stdin</code>为文件描述符，故拥有文件对象的方法，我们可以使用<code>read()</code>方法读取标准输入的所有内容，或者使用<code>readlines()</code>将标准输入内容读取到一个<code>list</code>中。</p>\n<figure class=\"highlight python\"><figcaption><span>upper.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_upper_list</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    content_list =  sys.stdin.readlines()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [i.upper() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> content_list]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> get_upper_list():</span><br><span class=\"line\">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure>\n<p>上述脚本中定义了<code>get_content()</code>函数，该函数使用<code>sys.stdin</code>标准输入的<code>readlines()</code>方法读取所有行，以列表类型保存于<code>content_list</code>，使用列表解析，调用每个元素(字符串类型)的<code>upper()</code>方法，构造一个新的列表并返回。<br>迭代<code>get_upper_list()</code>函数返回的新列表，将每一行写入标准输入。</p>\n<p>该脚本运行效果如下：<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609095401158.png\" alt=\"\"></p>\n<p>利用<code>sys.stdin</code>，我们几乎可以不再使用<code>awk</code>。将Python与Linux管道结合，可以充分发挥Python语言的文字处理能力。</p>\n<h1 id=\"fileinput\"><a href=\"#fileinput\" class=\"headerlink\" title=\"fileinput\"></a>fileinput</h1><p>对于<code>awk</code>，它可以同时处理多个文件，在Python中我们可以使用<code>fileinput</code>这个标准库来达到同样效果。<br><code>fileinput</code>比<code>sys.stdin</code>更为通用，它可以遍历<code>sys.argv[1:]</code>列表(所有命令行参数)中的文件，如果该列表为空(没有提供文件名参数)，则默认读取标准输入的内容。</p>\n<figure class=\"highlight python\"><figcaption><span>read_from_fileinput.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input():</span><br><span class=\"line\">    print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n<p>上述脚本直接调用了fileinput模块的input函数，该函数返回一个FileInput实例化的可迭代对象，可以使用for循环遍历取得每一行内容。fileinput既可以从标准输入读取数据，也可以从文件中(一个或多个)读取数据。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python read_from_fileinput.py -  <span class=\"comment\"># 从标准输入读取数据</span></span><br><span class=\"line\">$ cat /etc/passwd | python read_from_fileinput.py  <span class=\"comment\"># 通过管道读取passwd数据</span></span><br><span class=\"line\">$ python read_from_fileinput.py &lt; /etc/passwd  <span class=\"comment\"># 通过重定向读取passwd数据</span></span><br><span class=\"line\">$ python read_from_fileinput.py /etc/passwd  <span class=\"comment\"># 直接读取passwd文件数据</span></span><br><span class=\"line\">$ python read_from_fileinput.py /etc/passwd /etc/hosts  <span class=\"comment\"># 直接读取passwd与hosts文件数据</span></span><br></pre></td></tr></table></figure></p>\n<p>fileinput还提供了一些方法让我们知道当前读取的内容属于哪一个文件等便利的方法，常用方法如下：</p>\n<ul>\n<li><code>filename</code>: 当前正在读取文件的文件名 str</li>\n<li><code>fileno</code>: 文件的描述符 int</li>\n<li><code>filelineno</code>: 正在读取的行时当前文件的第几行 int</li>\n<li><code>isfirstline</code>: 正在读取的行是否是当前文件的第一行 bool</li>\n<li><code>isstdin</code>: 正在读的问价是否时从标准输入读取的 bool</li>\n<li><code>nextfile</code>: 关闭当前正在读取的文件，从下一个文件第一行开始 None</li>\n</ul>\n<p>我们可以完成一个简单的脚本来展示一下fileinput的各个方法：</p>\n<figure class=\"highlight python\"><figcaption><span>read_file.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input():</span><br><span class=\"line\">    meta = [<span class=\"string\">\"文件名:\"</span> + str(fileinput.filename()),</span><br><span class=\"line\">    <span class=\"string\">\" 文件描述符:\"</span> + str(fileinput.fileno()),</span><br><span class=\"line\">    <span class=\"string\">\" 行号:\"</span> + str(fileinput.filelineno()),</span><br><span class=\"line\">    <span class=\"string\">\" 首行:\"</span> + str(fileinput.isfirstline()),</span><br><span class=\"line\">    <span class=\"string\">\" 标准输入:\"</span> + str(fileinput.isstdin()) + <span class=\"string\">\" \"</span>]</span><br><span class=\"line\">    meta_ljust = [i.ljust(<span class=\"number\">9</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> meta]</span><br><span class=\"line\">    print(*meta_ljust, end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609114727921.png\" alt=\"\"></p>\n<p>同时fileinput还提供了钩子函数，可以帮助去自定义文件访问的方式：<br>fileinput内置了两个函数：<br><code>hook_compressed</code>: 识别并打开<code>.gz</code>和<code>.bz2</code>的压缩文件<br><code>hook_encoded</code>: 以特定的编码格式打开文件</p>\n<p>读取一个<code>.gz</code>压缩文件，如下所示：<br><figure class=\"highlight python\"><figcaption><span>read_compressed.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input(openhook=fileinput.hook_compressed):</span><br><span class=\"line\">    print(line.decode(<span class=\"string\">'utf-8'</span>), end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180610121207368.png\" alt=\"\"></p>\n<p>在中文windows下有读取utf-8,或在linux下读取gbk需要指定对应的编码格式，如下所示：</p>\n<figure class=\"highlight python\"><figcaption><span>read_encoded.py</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input(openhook=fileinput.hook_encoded(encoding=<span class=\"string\">\"gbk\"</span>)):</span><br><span class=\"line\">    print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"第一篇文章","date":"2018-05-31T12:25:00.000Z","comments":1,"top":null,"_content":"折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。\n\n先记录一下搭建时参考的教程吧：\n    1.首先时hexo的官方文档\n    `https://hexo.io/zh-cn/docs/`\n    2.接下来时NexT主题的相关配置\n    `https://www.jianshu.com/p/3ff20be8574c`\n\n后面我也会总结一下自己的搭建过程。\n\n*顺便测试一下图床*</br>\n[*七牛云*](http://portal.qiniu.com)\n![blog/first_blog-2018-5-31.png](http://p9lal5uqx.bkt.clouddn.com/blog/first_blog-2018-5-31.png)\n","source":"_posts/第一篇文章.md","raw":"---\ntitle: 第一篇文章\ndate: 2018-5-31 20:25:00\ncomments: true\ntag: other\ncategories: other\ntop:\n---\n折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。\n\n先记录一下搭建时参考的教程吧：\n    1.首先时hexo的官方文档\n    `https://hexo.io/zh-cn/docs/`\n    2.接下来时NexT主题的相关配置\n    `https://www.jianshu.com/p/3ff20be8574c`\n\n后面我也会总结一下自己的搭建过程。\n\n*顺便测试一下图床*</br>\n[*七牛云*](http://portal.qiniu.com)\n![blog/first_blog-2018-5-31.png](http://p9lal5uqx.bkt.clouddn.com/blog/first_blog-2018-5-31.png)\n","slug":"第一篇文章","published":1,"updated":"2018-06-05T16:28:05.536Z","layout":"post","photos":[],"link":"","_id":"cji7duumc0003s70uaq3s6pnw","content":"<p>折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。</p>\n<p>先记录一下搭建时参考的教程吧：<br>    1.首先时hexo的官方文档<br>    <code>https://hexo.io/zh-cn/docs/</code><br>    2.接下来时NexT主题的相关配置<br>    <code>https://www.jianshu.com/p/3ff20be8574c</code></p>\n<p>后面我也会总结一下自己的搭建过程。</p>\n<p><em>顺便测试一下图床</em><br><br><a href=\"http://portal.qiniu.com\" target=\"_blank\" rel=\"noopener\"><em>七牛云</em></a><br><img src=\"http://p9lal5uqx.bkt.clouddn.com/blog/first_blog-2018-5-31.png\" alt=\"blog/first_blog-2018-5-31.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。</p>\n<p>先记录一下搭建时参考的教程吧：<br>    1.首先时hexo的官方文档<br>    <code>https://hexo.io/zh-cn/docs/</code><br>    2.接下来时NexT主题的相关配置<br>    <code>https://www.jianshu.com/p/3ff20be8574c</code></p>\n<p>后面我也会总结一下自己的搭建过程。</p>\n<p><em>顺便测试一下图床</em><br><br><a href=\"http://portal.qiniu.com\" target=\"_blank\" rel=\"noopener\"><em>七牛云</em></a><br><img src=\"http://p9lal5uqx.bkt.clouddn.com/blog/first_blog-2018-5-31.png\" alt=\"blog/first_blog-2018-5-31.png\"></p>\n"},{"title":"使用Hexo与Gitpages搭建博客","comments":1,"date":"2018-06-03T14:02:48.000Z","top":null,"_content":"\n# 使用Hexo与Gitpages搭建博客\n\n一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。\n\n各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。\n\n## 搭建本地Hexo运行环境\n\n我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。\n\n### 了解Hexo\n\n> Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。\n\n{% exturl Hexo https://hexo.io/zh-cn/ Hexo官网%}\n\n### Git版本管理工具安装\n\nGit是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。\n\n* Windows：下载并安装 [git](https://git-scm.com/download/win \"下载git\")。\n* Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/), [MacPorts](http://www.macports.org/) ：`brew install git`；或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装。\n* Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n* Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n{% note warning　%}\n** Windows用户　**\n由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。\n或者可以参考这里[Git for Windows 国内下载站](https://github.com/waylau/git-for-win \"git for windows下载\")。\n{% endnote %}\n\n如果想学习Git的使用，推荐一下廖老师的教程　{% exturl 廖雪峰的官方网站 https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 %}\n\n### Node.js环境搭建\n由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。\n\n#### 了解Node.js\n\n> Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 \n> Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 \n> Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n\n{% exturl Node http://nodejs.cn/ Node.js官网 %}\n\n<!-- more -->\n\n#### Node.js安装\n使用[nvm](https://github.com/creationix/nvm)来安装Node.js\n{% tabs node.js, 1%}\n<!-- tab cURL@download -->\n使用curl安装\n`$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh`\n<!-- endtab -->\n<!-- tab Wget@download -->\n使用Wget安装\n`$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh`\n<!-- endtab -->\n{% endtabs %}\n\n安装完成后重启终端，执行以下命令安装Node.js\n```bash\nnvm install stable\n```\n\n{% note info %}\n也可以直接下载[安装程序](https://nodejs.org/en/download/)执行安装\n{% endnote %}\n\n### 安装hexo\n使用Node.js的包管理工具npm安装hexo\n```bash\nnpm install -g hexo-cli\n```\n安装完成后，可以在命令行终端试一下hexo是否可以使用\n![hexo](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180604111622738.png)\n\n若不能使用，可以检查以下几方面：\n* npm install过程是否有异常\n* 检查环境变量是否正常，安装时会在/usr/bin/中创建hexo可执行程序的软链接\n* 若链接不存在，检查/usr/lib/node_modules/hexo/bin/hexo是否存在，手工在/usr/bin/下创建链接`ln -s /usr/lib/node_modules/hexo/bin/hexo /usr/bin/hexo`\n\n### 使用Hexo建站\n\n#### 初始化\n使用如下命令，hexo可以在一个指定文件夹(blog)中创建所需文件\n\n```bash\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n\n完成后使用`tree blog`可以得到目录树如下\n\n```raw\n.\n├── _config.yml    # 网站的配置信息，您可以在此配置大部分的参数。\n├── package.json    # 应用程序的信息。\n├── scaffolds    # 模版文件夹。新建文章时，Hexo会根据 scaffold 来建立文件。\n├── source    # 资源文件夹是存放用户资源的地方\n|   ├── _drafts\n|   └── _posts\n└── themes    # 主题文件夹。Hexo会根据主题来生成静态页面。\n```\n\n\n#### Hexo基本配置\n\n在blog目录下，_config.yml中为用户可以自定义的配置，我们可以从[Hexo官网](https://hexo.io/zh-cn/docs/configuration.html)了解各个参数的意义。\n下面列出我搭建时的修改项。\n\n```raw\n# Site\ntitle: Shadowless\nsubtitle: 备忘录\ndescription: 求知若饥，虚心若愚\nkeywords: blog\nauthor: Shadowless\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n|参数|描述|\n|:-|:-|\n|title|网站标题|\n|subtitle|网站副标题|\n|description|网站描述|\n|author|您的名字|\n|language|网站使用的语言，如：zh-CN|\n|timezone|网站时区。Hexo 默认使用您电脑的时区。如：Asia/Shanghai|\n\n```raw\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://shadowless.top\nroot: /\n# permalink: :year/:month/:day/:title/\npermalink: :category/:title/\npermalink_defaults:\n```\n\n|参数|描述|默认值|\n|:-|:-|:-|\n|url|网址|　|\t\n|root|网站根目录|　|\t\n|permalink|文章的永久链接格式|:year/:month/:day/:title/|\n|permalink_defaults|永久链接中各部分的默认值|　|\n \n以上参数自定义完成后可以执行`hexo g`生成静态页面\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605102944249.png)\n\n然后输入命令`hexo s --debug`，以debug模式启动hexo的server模块\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103346674.png)\n\n待启动成功后可以使用浏览器输入本地回环地址`http://localhost:4000/` or `http://127.0.0.1:4000/`访问你所创建的博客页面。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103708454.png)\n\n以上基本配置已经完成，接下来我们来学习一下文章的创建，主题的配置，以及将本地搭建完成的博客部署到gitgub。\n\n\n#### 新建文章\n\n我们可以使用 `hexo new post “文章名”`来新建一篇文章\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605104559869.png)\n新建的内容会在`blog/source/_posts/`目录中，由你指定的文章名命名，后缀为`.md`。\n我们可以直接使用markdown语法编写该文件。\n\n\n## 将博客部署到Github\n\n### Github账户与仓库配置\n\n#### 新建仓库\n首先我们打开[“全球最大同性交友网站gayhub”](https://github.com/)，然后注册一个账户。\n\n登录账户，在网页上方状态栏找到一个加号，点击New repository。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105321620.png)\n\n接下来会让你填写仓库名称，这里需要填写的格式为：`用户名.github.io`。\n如图所示，设置为public仓库，可以不用README初始化仓库，也可以不添加.gitignore和license。\n然后点击下方`Create repository`即可。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105605162.png)\n\n完成后我们会跳转至该仓库，在该页会有在本地添加远程仓库的指导以及HTTPS和SSH链接。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110157400.png)\n\n#### 配置SSH keys\n我们选择使用ssh进行部署。需要生成一对ssh认证的密钥，然后将公钥添加到你的github账户。\n\n分为如下步骤:\n* 检查SSH keys是否存在\n* 生成新的ssh key\n* 将ssh key添加到GitHub中\n\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110650809.png)\n\n1. keys所在目录为`~/.ssh/`中，检查目标文件`id_rsa`, `id_rsa.pub`是否存在。![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110828788.png)\n\n2.  若文件不存在，我们需要重新生成密钥。\n    在命令行中输入`ssh-keygen -t rsa -C \"your_email@example.com\"`，为了方便可以一路按回车，不需要输入其他内容，默认会在相应路径下（/your_home_path）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n    ```bash\n    ssh-keygen -t rsa -C \"your_email@example.com\"\n    # Creates a new ssh key using the provided email\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/your_home_path/.ssh/id_rsa):\n    ```\n3. 将新生成的key添加到ssh-agent中:\n    ```bash\n    # start the ssh-agent in the background\n    eval \"$(ssh-agent -s)\"\n    Agent pid 59566\n    ssh-add ~/.ssh/id_rsa\n    ```\n\n将ssh key添加到GitHub中:\n\n- 打开Github，点击右上角加号，选择Settings\n\n    ![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605112652130.png)\n\n- 选择左侧一列中`SSH and GPG keys`。\n- 选择`New SSH key`。\n- 打开本地`~/.ssh/id_rsa.pub`文件将其中内容复制出来，粘贴到github页面key的输入框中。\n- 点击 add SSH Key完成添加\n\n#### 修改配置文件\n\n打开博客根目录下的`_config.yml`配置文件，找到deploy一栏，按照如下模板填写。\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: 你github仓库的SSH链接\n  branch: master\n  message: update my blog\n```\n\n#### 将博客部署到远程\n\n首先我们需要生成网页的静态文件：\n```bash\nhexo generate\n```\n然后使用命令将生成的静态文件PUSH到github远程仓库：\n```bash\nhexo deploy\n```\n等待完成后可以访问`你的用户名.github.io`来进入博客了。\n\n每次更新文章后都可以使用`hexo generate`生成静态文件，再`hexo deploy`将其push到github。\n\n\n{% note info %}\n后续会增加关于[Next主题](http://theme-next.iissnan.com/)的配置\n{% endnote %}\n\n{% button http://shadowless.top, HOME, icon button, title %}\n","source":"_posts/使用Hexo与Gitpages搭建博客.md","raw":"---\ntitle: 使用Hexo与Gitpages搭建博客\ncomments: true\ndate: 2018-06-03 22:02:48\ntag: hexo\ncategories: hexo\ntop:\n---\n\n# 使用Hexo与Gitpages搭建博客\n\n一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。\n\n各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。\n\n## 搭建本地Hexo运行环境\n\n我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。\n\n### 了解Hexo\n\n> Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。\n\n{% exturl Hexo https://hexo.io/zh-cn/ Hexo官网%}\n\n### Git版本管理工具安装\n\nGit是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。\n\n* Windows：下载并安装 [git](https://git-scm.com/download/win \"下载git\")。\n* Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/), [MacPorts](http://www.macports.org/) ：`brew install git`；或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装。\n* Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n* Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n{% note warning　%}\n** Windows用户　**\n由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。\n或者可以参考这里[Git for Windows 国内下载站](https://github.com/waylau/git-for-win \"git for windows下载\")。\n{% endnote %}\n\n如果想学习Git的使用，推荐一下廖老师的教程　{% exturl 廖雪峰的官方网站 https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 %}\n\n### Node.js环境搭建\n由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。\n\n#### 了解Node.js\n\n> Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 \n> Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 \n> Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n\n{% exturl Node http://nodejs.cn/ Node.js官网 %}\n\n<!-- more -->\n\n#### Node.js安装\n使用[nvm](https://github.com/creationix/nvm)来安装Node.js\n{% tabs node.js, 1%}\n<!-- tab cURL@download -->\n使用curl安装\n`$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh`\n<!-- endtab -->\n<!-- tab Wget@download -->\n使用Wget安装\n`$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh`\n<!-- endtab -->\n{% endtabs %}\n\n安装完成后重启终端，执行以下命令安装Node.js\n```bash\nnvm install stable\n```\n\n{% note info %}\n也可以直接下载[安装程序](https://nodejs.org/en/download/)执行安装\n{% endnote %}\n\n### 安装hexo\n使用Node.js的包管理工具npm安装hexo\n```bash\nnpm install -g hexo-cli\n```\n安装完成后，可以在命令行终端试一下hexo是否可以使用\n![hexo](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180604111622738.png)\n\n若不能使用，可以检查以下几方面：\n* npm install过程是否有异常\n* 检查环境变量是否正常，安装时会在/usr/bin/中创建hexo可执行程序的软链接\n* 若链接不存在，检查/usr/lib/node_modules/hexo/bin/hexo是否存在，手工在/usr/bin/下创建链接`ln -s /usr/lib/node_modules/hexo/bin/hexo /usr/bin/hexo`\n\n### 使用Hexo建站\n\n#### 初始化\n使用如下命令，hexo可以在一个指定文件夹(blog)中创建所需文件\n\n```bash\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n\n完成后使用`tree blog`可以得到目录树如下\n\n```raw\n.\n├── _config.yml    # 网站的配置信息，您可以在此配置大部分的参数。\n├── package.json    # 应用程序的信息。\n├── scaffolds    # 模版文件夹。新建文章时，Hexo会根据 scaffold 来建立文件。\n├── source    # 资源文件夹是存放用户资源的地方\n|   ├── _drafts\n|   └── _posts\n└── themes    # 主题文件夹。Hexo会根据主题来生成静态页面。\n```\n\n\n#### Hexo基本配置\n\n在blog目录下，_config.yml中为用户可以自定义的配置，我们可以从[Hexo官网](https://hexo.io/zh-cn/docs/configuration.html)了解各个参数的意义。\n下面列出我搭建时的修改项。\n\n```raw\n# Site\ntitle: Shadowless\nsubtitle: 备忘录\ndescription: 求知若饥，虚心若愚\nkeywords: blog\nauthor: Shadowless\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n|参数|描述|\n|:-|:-|\n|title|网站标题|\n|subtitle|网站副标题|\n|description|网站描述|\n|author|您的名字|\n|language|网站使用的语言，如：zh-CN|\n|timezone|网站时区。Hexo 默认使用您电脑的时区。如：Asia/Shanghai|\n\n```raw\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://shadowless.top\nroot: /\n# permalink: :year/:month/:day/:title/\npermalink: :category/:title/\npermalink_defaults:\n```\n\n|参数|描述|默认值|\n|:-|:-|:-|\n|url|网址|　|\t\n|root|网站根目录|　|\t\n|permalink|文章的永久链接格式|:year/:month/:day/:title/|\n|permalink_defaults|永久链接中各部分的默认值|　|\n \n以上参数自定义完成后可以执行`hexo g`生成静态页面\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605102944249.png)\n\n然后输入命令`hexo s --debug`，以debug模式启动hexo的server模块\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103346674.png)\n\n待启动成功后可以使用浏览器输入本地回环地址`http://localhost:4000/` or `http://127.0.0.1:4000/`访问你所创建的博客页面。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103708454.png)\n\n以上基本配置已经完成，接下来我们来学习一下文章的创建，主题的配置，以及将本地搭建完成的博客部署到gitgub。\n\n\n#### 新建文章\n\n我们可以使用 `hexo new post “文章名”`来新建一篇文章\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605104559869.png)\n新建的内容会在`blog/source/_posts/`目录中，由你指定的文章名命名，后缀为`.md`。\n我们可以直接使用markdown语法编写该文件。\n\n\n## 将博客部署到Github\n\n### Github账户与仓库配置\n\n#### 新建仓库\n首先我们打开[“全球最大同性交友网站gayhub”](https://github.com/)，然后注册一个账户。\n\n登录账户，在网页上方状态栏找到一个加号，点击New repository。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105321620.png)\n\n接下来会让你填写仓库名称，这里需要填写的格式为：`用户名.github.io`。\n如图所示，设置为public仓库，可以不用README初始化仓库，也可以不添加.gitignore和license。\n然后点击下方`Create repository`即可。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105605162.png)\n\n完成后我们会跳转至该仓库，在该页会有在本地添加远程仓库的指导以及HTTPS和SSH链接。\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110157400.png)\n\n#### 配置SSH keys\n我们选择使用ssh进行部署。需要生成一对ssh认证的密钥，然后将公钥添加到你的github账户。\n\n分为如下步骤:\n* 检查SSH keys是否存在\n* 生成新的ssh key\n* 将ssh key添加到GitHub中\n\n\n![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110650809.png)\n\n1. keys所在目录为`~/.ssh/`中，检查目标文件`id_rsa`, `id_rsa.pub`是否存在。![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110828788.png)\n\n2.  若文件不存在，我们需要重新生成密钥。\n    在命令行中输入`ssh-keygen -t rsa -C \"your_email@example.com\"`，为了方便可以一路按回车，不需要输入其他内容，默认会在相应路径下（/your_home_path）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n    ```bash\n    ssh-keygen -t rsa -C \"your_email@example.com\"\n    # Creates a new ssh key using the provided email\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/your_home_path/.ssh/id_rsa):\n    ```\n3. 将新生成的key添加到ssh-agent中:\n    ```bash\n    # start the ssh-agent in the background\n    eval \"$(ssh-agent -s)\"\n    Agent pid 59566\n    ssh-add ~/.ssh/id_rsa\n    ```\n\n将ssh key添加到GitHub中:\n\n- 打开Github，点击右上角加号，选择Settings\n\n    ![](http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605112652130.png)\n\n- 选择左侧一列中`SSH and GPG keys`。\n- 选择`New SSH key`。\n- 打开本地`~/.ssh/id_rsa.pub`文件将其中内容复制出来，粘贴到github页面key的输入框中。\n- 点击 add SSH Key完成添加\n\n#### 修改配置文件\n\n打开博客根目录下的`_config.yml`配置文件，找到deploy一栏，按照如下模板填写。\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: 你github仓库的SSH链接\n  branch: master\n  message: update my blog\n```\n\n#### 将博客部署到远程\n\n首先我们需要生成网页的静态文件：\n```bash\nhexo generate\n```\n然后使用命令将生成的静态文件PUSH到github远程仓库：\n```bash\nhexo deploy\n```\n等待完成后可以访问`你的用户名.github.io`来进入博客了。\n\n每次更新文章后都可以使用`hexo generate`生成静态文件，再`hexo deploy`将其push到github。\n\n\n{% note info %}\n后续会增加关于[Next主题](http://theme-next.iissnan.com/)的配置\n{% endnote %}\n\n{% button http://shadowless.top, HOME, icon button, title %}\n","slug":"使用Hexo与Gitpages搭建博客","published":1,"updated":"2018-06-05T16:56:20.445Z","layout":"post","photos":[],"link":"","_id":"cji7duumg0005s70u7u06qk4h","content":"<h1 id=\"使用Hexo与Gitpages搭建博客\"><a href=\"#使用Hexo与Gitpages搭建博客\" class=\"headerlink\" title=\"使用Hexo与Gitpages搭建博客\"></a>使用Hexo与Gitpages搭建博客</h1><p>一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。</p>\n<p>各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。</p>\n<h2 id=\"搭建本地Hexo运行环境\"><a href=\"#搭建本地Hexo运行环境\" class=\"headerlink\" title=\"搭建本地Hexo运行环境\"></a>搭建本地Hexo运行环境</h2><p>我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。</p>\n<h3 id=\"了解Hexo\"><a href=\"#了解Hexo\" class=\"headerlink\" title=\"了解Hexo\"></a>了解Hexo</h3><blockquote>\n<p>Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。</p>\n</blockquote>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==\" title=\"Hexo官网\"><i class=\"fa fa-external-link\"></i> Hexo</span>\n<h3 id=\"Git版本管理工具安装\"><a href=\"#Git版本管理工具安装\" class=\"headerlink\" title=\"Git版本管理工具安装\"></a>Git版本管理工具安装</h3><p>Git是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。</p>\n<ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" title=\"下载git\" target=\"_blank\" rel=\"noopener\">git</a>。</li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>；或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n<div class=\"note warning\"><p><strong> Windows用户　</strong><br>由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。<br>或者可以参考这里<a href=\"https://github.com/waylau/git-for-win\" title=\"git for windows下载\" target=\"_blank\" rel=\"noopener\">Git for Windows 国内下载站</a>。</p></div>\n<p>如果想学习Git的使用，推荐一下廖老师的教程　<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDA=\" title=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\"><i class=\"fa fa-external-link\"></i> 廖雪峰的官方网站</span></p>\n<h3 id=\"Node-js环境搭建\"><a href=\"#Node-js环境搭建\" class=\"headerlink\" title=\"Node.js环境搭建\"></a>Node.js环境搭建</h3><p>由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。</p>\n<h4 id=\"了解Node-js\"><a href=\"#了解Node-js\" class=\"headerlink\" title=\"了解Node.js\"></a>了解Node.js</h4><blockquote>\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n</blockquote>\n<span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5jbi8=\" title=\"Node.js官网\"><i class=\"fa fa-external-link\"></i> Node</span>\n<a id=\"more\"></a>\n<h4 id=\"Node-js安装\"><a href=\"#Node-js安装\" class=\"headerlink\" title=\"Node.js安装\"></a>Node.js安装</h4><p>使用<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>来安装Node.js<br><div class=\"tabs\" id=\"node.js\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#node.js-1\"><i class=\"fa fa-download\" \"=\"\"></i>cURL</a></li><li class=\"tab\"><a href=\"#node.js-2\"><i class=\"fa fa-download\" \"=\"\"></i>Wget</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"node.js-1\"><p>使用curl安装<br><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</div><div class=\"tab-pane\" id=\"node.js-2\"><p>使用Wget安装<br><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</div></div></div></p>\n<p>安装完成后重启终端，执行以下命令安装Node.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure></p>\n<div class=\"note info\"><p>也可以直接下载<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">安装程序</a>执行安装</p></div>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>使用Node.js的包管理工具npm安装hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，可以在命令行终端试一下hexo是否可以使用<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180604111622738.png\" alt=\"hexo\"></p>\n<p>若不能使用，可以检查以下几方面：</p>\n<ul>\n<li>npm install过程是否有异常</li>\n<li>检查环境变量是否正常，安装时会在/usr/bin/中创建hexo可执行程序的软链接</li>\n<li>若链接不存在，检查/usr/lib/node_modules/hexo/bin/hexo是否存在，手工在/usr/bin/下创建链接<code>ln -s /usr/lib/node_modules/hexo/bin/hexo /usr/bin/hexo</code></li>\n</ul>\n<h3 id=\"使用Hexo建站\"><a href=\"#使用Hexo建站\" class=\"headerlink\" title=\"使用Hexo建站\"></a>使用Hexo建站</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>使用如下命令，hexo可以在一个指定文件夹(blog)中创建所需文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>完成后使用<code>tree blog</code>可以得到目录树如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml    # 网站的配置信息，您可以在此配置大部分的参数。</span><br><span class=\"line\">├── package.json    # 应用程序的信息。</span><br><span class=\"line\">├── scaffolds    # 模版文件夹。新建文章时，Hexo会根据 scaffold 来建立文件。</span><br><span class=\"line\">├── source    # 资源文件夹是存放用户资源的地方</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes    # 主题文件夹。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Hexo基本配置\"><a href=\"#Hexo基本配置\" class=\"headerlink\" title=\"Hexo基本配置\"></a>Hexo基本配置</h4><p>在blog目录下，_config.yml中为用户可以自定义的配置，我们可以从<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo官网</a>了解各个参数的意义。<br>下面列出我搭建时的修改项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: Shadowless</span><br><span class=\"line\">subtitle: 备忘录</span><br><span class=\"line\">description: 求知若饥，虚心若愚</span><br><span class=\"line\">keywords: blog</span><br><span class=\"line\">author: Shadowless</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">title</td>\n<td style=\"text-align:left\">网站标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">subtitle</td>\n<td style=\"text-align:left\">网站副标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">description</td>\n<td style=\"text-align:left\">网站描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">author</td>\n<td style=\"text-align:left\">您的名字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">language</td>\n<td style=\"text-align:left\">网站使用的语言，如：zh-CN</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timezone</td>\n<td style=\"text-align:left\">网站时区。Hexo 默认使用您电脑的时区。如：Asia/Shanghai</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://shadowless.top</span><br><span class=\"line\">root: /</span><br><span class=\"line\"># permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink: :category/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">url</td>\n<td style=\"text-align:left\">网址</td>\n<td style=\"text-align:left\">　</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">root</td>\n<td style=\"text-align:left\">网站根目录</td>\n<td style=\"text-align:left\">　</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">permalink</td>\n<td style=\"text-align:left\">文章的永久链接格式</td>\n<td style=\"text-align:left\">:year/:month/:day/:title/</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">permalink_defaults</td>\n<td style=\"text-align:left\">永久链接中各部分的默认值</td>\n<td style=\"text-align:left\">　</td>\n</tr>\n</tbody>\n</table>\n<p>以上参数自定义完成后可以执行<code>hexo g</code>生成静态页面<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605102944249.png\" alt=\"\"></p>\n<p>然后输入命令<code>hexo s --debug</code>，以debug模式启动hexo的server模块</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103346674.png\" alt=\"\"></p>\n<p>待启动成功后可以使用浏览器输入本地回环地址<code>http://localhost:4000/</code> or <code>http://127.0.0.1:4000/</code>访问你所创建的博客页面。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103708454.png\" alt=\"\"></p>\n<p>以上基本配置已经完成，接下来我们来学习一下文章的创建，主题的配置，以及将本地搭建完成的博客部署到gitgub。</p>\n<h4 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h4><p>我们可以使用 <code>hexo new post “文章名”</code>来新建一篇文章<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605104559869.png\" alt=\"\"><br>新建的内容会在<code>blog/source/_posts/</code>目录中，由你指定的文章名命名，后缀为<code>.md</code>。<br>我们可以直接使用markdown语法编写该文件。</p>\n<h2 id=\"将博客部署到Github\"><a href=\"#将博客部署到Github\" class=\"headerlink\" title=\"将博客部署到Github\"></a>将博客部署到Github</h2><h3 id=\"Github账户与仓库配置\"><a href=\"#Github账户与仓库配置\" class=\"headerlink\" title=\"Github账户与仓库配置\"></a>Github账户与仓库配置</h3><h4 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h4><p>首先我们打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">“全球最大同性交友网站gayhub”</a>，然后注册一个账户。</p>\n<p>登录账户，在网页上方状态栏找到一个加号，点击New repository。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105321620.png\" alt=\"\"></p>\n<p>接下来会让你填写仓库名称，这里需要填写的格式为：<code>用户名.github.io</code>。<br>如图所示，设置为public仓库，可以不用README初始化仓库，也可以不添加.gitignore和license。<br>然后点击下方<code>Create repository</code>即可。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105605162.png\" alt=\"\"></p>\n<p>完成后我们会跳转至该仓库，在该页会有在本地添加远程仓库的指导以及HTTPS和SSH链接。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110157400.png\" alt=\"\"></p>\n<h4 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h4><p>我们选择使用ssh进行部署。需要生成一对ssh认证的密钥，然后将公钥添加到你的github账户。</p>\n<p>分为如下步骤:</p>\n<ul>\n<li>检查SSH keys是否存在</li>\n<li>生成新的ssh key</li>\n<li>将ssh key添加到GitHub中</li>\n</ul>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110650809.png\" alt=\"\"></p>\n<ol>\n<li><p>keys所在目录为<code>~/.ssh/</code>中，检查目标文件<code>id_rsa</code>, <code>id_rsa.pub</code>是否存在。<img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110828788.png\" alt=\"\"></p>\n</li>\n<li><p>若文件不存在，我们需要重新生成密钥。<br>在命令行中输入<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>，为了方便可以一路按回车，不需要输入其他内容，默认会在相应路径下（/your_home_path）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span></span><br><span class=\"line\"><span class=\"comment\"># Creates a new ssh key using the provided email</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/your_home_path/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将新生成的key添加到ssh-agent中:</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start the ssh-agent in the background</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">Agent pid 59566</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将ssh key添加到GitHub中:</p>\n<ul>\n<li><p>打开Github，点击右上角加号，选择Settings</p>\n<p>  <img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605112652130.png\" alt=\"\"></p>\n</li>\n<li><p>选择左侧一列中<code>SSH and GPG keys</code>。</p>\n</li>\n<li>选择<code>New SSH key</code>。</li>\n<li>打开本地<code>~/.ssh/id_rsa.pub</code>文件将其中内容复制出来，粘贴到github页面key的输入框中。</li>\n<li>点击 add SSH Key完成添加</li>\n</ul>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><p>打开博客根目录下的<code>_config.yml</code>配置文件，找到deploy一栏，按照如下模板填写。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: 你github仓库的SSH链接</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: update my blog</span><br></pre></td></tr></table></figure>\n<h4 id=\"将博客部署到远程\"><a href=\"#将博客部署到远程\" class=\"headerlink\" title=\"将博客部署到远程\"></a>将博客部署到远程</h4><p>首先我们需要生成网页的静态文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>然后使用命令将生成的静态文件PUSH到github远程仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>等待完成后可以访问<code>你的用户名.github.io</code>来进入博客了。</p>\n<p>每次更新文章后都可以使用<code>hexo generate</code>生成静态文件，再<code>hexo deploy</code>将其push到github。</p>\n<div class=\"note info\"><p>后续会增加关于<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题</a>的配置</p></div>\n<a class=\"btn\" href=\"http://shadowless.top\" title=\"title\"><i class=\"fa fa-icon button\"></i>HOME</a>\n","site":{"data":{}},"excerpt":"<h1 id=\"使用Hexo与Gitpages搭建博客\"><a href=\"#使用Hexo与Gitpages搭建博客\" class=\"headerlink\" title=\"使用Hexo与Gitpages搭建博客\"></a>使用Hexo与Gitpages搭建博客</h1><p>一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。</p>\n<p>各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。</p>\n<h2 id=\"搭建本地Hexo运行环境\"><a href=\"#搭建本地Hexo运行环境\" class=\"headerlink\" title=\"搭建本地Hexo运行环境\"></a>搭建本地Hexo运行环境</h2><p>我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。</p>\n<h3 id=\"了解Hexo\"><a href=\"#了解Hexo\" class=\"headerlink\" title=\"了解Hexo\"></a>了解Hexo</h3><blockquote>\n<p>Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。</p>\n</blockquote>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==\" title=\"Hexo官网\"><i class=\"fa fa-external-link\"></i> Hexo</span>\n<h3 id=\"Git版本管理工具安装\"><a href=\"#Git版本管理工具安装\" class=\"headerlink\" title=\"Git版本管理工具安装\"></a>Git版本管理工具安装</h3><p>Git是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。</p>\n<ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" title=\"下载git\" target=\"_blank\" rel=\"noopener\">git</a>。</li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>；或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n<div class=\"note warning\"><p><strong> Windows用户　</strong><br>由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。<br>或者可以参考这里<a href=\"https://github.com/waylau/git-for-win\" title=\"git for windows下载\" target=\"_blank\" rel=\"noopener\">Git for Windows 国内下载站</a>。</p></div>\n<p>如果想学习Git的使用，推荐一下廖老师的教程　<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDA=\" title=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\"><i class=\"fa fa-external-link\"></i> 廖雪峰的官方网站</span></p>\n<h3 id=\"Node-js环境搭建\"><a href=\"#Node-js环境搭建\" class=\"headerlink\" title=\"Node.js环境搭建\"></a>Node.js环境搭建</h3><p>由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。</p>\n<h4 id=\"了解Node-js\"><a href=\"#了解Node-js\" class=\"headerlink\" title=\"了解Node.js\"></a>了解Node.js</h4><blockquote>\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n</blockquote>\n<span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5jbi8=\" title=\"Node.js官网\"><i class=\"fa fa-external-link\"></i> Node</span>","more":"<h4 id=\"Node-js安装\"><a href=\"#Node-js安装\" class=\"headerlink\" title=\"Node.js安装\"></a>Node.js安装</h4><p>使用<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>来安装Node.js<br><div class=\"tabs\" id=\"node.js\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#node.js-1\"><i class=\"fa fa-download\" \"=\"\"></i>cURL</a></li><li class=\"tab\"><a href=\"#node.js-2\"><i class=\"fa fa-download\" \"=\"\"></i>Wget</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"node.js-1\"><p>使用curl安装<br><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</div><div class=\"tab-pane\" id=\"node.js-2\"><p>使用Wget安装<br><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</div></div></div></p>\n<p>安装完成后重启终端，执行以下命令安装Node.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure></p>\n<div class=\"note info\"><p>也可以直接下载<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">安装程序</a>执行安装</p></div>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>使用Node.js的包管理工具npm安装hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，可以在命令行终端试一下hexo是否可以使用<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180604111622738.png\" alt=\"hexo\"></p>\n<p>若不能使用，可以检查以下几方面：</p>\n<ul>\n<li>npm install过程是否有异常</li>\n<li>检查环境变量是否正常，安装时会在/usr/bin/中创建hexo可执行程序的软链接</li>\n<li>若链接不存在，检查/usr/lib/node_modules/hexo/bin/hexo是否存在，手工在/usr/bin/下创建链接<code>ln -s /usr/lib/node_modules/hexo/bin/hexo /usr/bin/hexo</code></li>\n</ul>\n<h3 id=\"使用Hexo建站\"><a href=\"#使用Hexo建站\" class=\"headerlink\" title=\"使用Hexo建站\"></a>使用Hexo建站</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>使用如下命令，hexo可以在一个指定文件夹(blog)中创建所需文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>完成后使用<code>tree blog</code>可以得到目录树如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml    # 网站的配置信息，您可以在此配置大部分的参数。</span><br><span class=\"line\">├── package.json    # 应用程序的信息。</span><br><span class=\"line\">├── scaffolds    # 模版文件夹。新建文章时，Hexo会根据 scaffold 来建立文件。</span><br><span class=\"line\">├── source    # 资源文件夹是存放用户资源的地方</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes    # 主题文件夹。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Hexo基本配置\"><a href=\"#Hexo基本配置\" class=\"headerlink\" title=\"Hexo基本配置\"></a>Hexo基本配置</h4><p>在blog目录下，_config.yml中为用户可以自定义的配置，我们可以从<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo官网</a>了解各个参数的意义。<br>下面列出我搭建时的修改项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: Shadowless</span><br><span class=\"line\">subtitle: 备忘录</span><br><span class=\"line\">description: 求知若饥，虚心若愚</span><br><span class=\"line\">keywords: blog</span><br><span class=\"line\">author: Shadowless</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">title</td>\n<td style=\"text-align:left\">网站标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">subtitle</td>\n<td style=\"text-align:left\">网站副标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">description</td>\n<td style=\"text-align:left\">网站描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">author</td>\n<td style=\"text-align:left\">您的名字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">language</td>\n<td style=\"text-align:left\">网站使用的语言，如：zh-CN</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timezone</td>\n<td style=\"text-align:left\">网站时区。Hexo 默认使用您电脑的时区。如：Asia/Shanghai</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://shadowless.top</span><br><span class=\"line\">root: /</span><br><span class=\"line\"># permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink: :category/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">url</td>\n<td style=\"text-align:left\">网址</td>\n<td style=\"text-align:left\">　</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">root</td>\n<td style=\"text-align:left\">网站根目录</td>\n<td style=\"text-align:left\">　</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">permalink</td>\n<td style=\"text-align:left\">文章的永久链接格式</td>\n<td style=\"text-align:left\">:year/:month/:day/:title/</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">permalink_defaults</td>\n<td style=\"text-align:left\">永久链接中各部分的默认值</td>\n<td style=\"text-align:left\">　</td>\n</tr>\n</tbody>\n</table>\n<p>以上参数自定义完成后可以执行<code>hexo g</code>生成静态页面<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605102944249.png\" alt=\"\"></p>\n<p>然后输入命令<code>hexo s --debug</code>，以debug模式启动hexo的server模块</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103346674.png\" alt=\"\"></p>\n<p>待启动成功后可以使用浏览器输入本地回环地址<code>http://localhost:4000/</code> or <code>http://127.0.0.1:4000/</code>访问你所创建的博客页面。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103708454.png\" alt=\"\"></p>\n<p>以上基本配置已经完成，接下来我们来学习一下文章的创建，主题的配置，以及将本地搭建完成的博客部署到gitgub。</p>\n<h4 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h4><p>我们可以使用 <code>hexo new post “文章名”</code>来新建一篇文章<br><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605104559869.png\" alt=\"\"><br>新建的内容会在<code>blog/source/_posts/</code>目录中，由你指定的文章名命名，后缀为<code>.md</code>。<br>我们可以直接使用markdown语法编写该文件。</p>\n<h2 id=\"将博客部署到Github\"><a href=\"#将博客部署到Github\" class=\"headerlink\" title=\"将博客部署到Github\"></a>将博客部署到Github</h2><h3 id=\"Github账户与仓库配置\"><a href=\"#Github账户与仓库配置\" class=\"headerlink\" title=\"Github账户与仓库配置\"></a>Github账户与仓库配置</h3><h4 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h4><p>首先我们打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">“全球最大同性交友网站gayhub”</a>，然后注册一个账户。</p>\n<p>登录账户，在网页上方状态栏找到一个加号，点击New repository。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105321620.png\" alt=\"\"></p>\n<p>接下来会让你填写仓库名称，这里需要填写的格式为：<code>用户名.github.io</code>。<br>如图所示，设置为public仓库，可以不用README初始化仓库，也可以不添加.gitignore和license。<br>然后点击下方<code>Create repository</code>即可。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105605162.png\" alt=\"\"></p>\n<p>完成后我们会跳转至该仓库，在该页会有在本地添加远程仓库的指导以及HTTPS和SSH链接。</p>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110157400.png\" alt=\"\"></p>\n<h4 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h4><p>我们选择使用ssh进行部署。需要生成一对ssh认证的密钥，然后将公钥添加到你的github账户。</p>\n<p>分为如下步骤:</p>\n<ul>\n<li>检查SSH keys是否存在</li>\n<li>生成新的ssh key</li>\n<li>将ssh key添加到GitHub中</li>\n</ul>\n<p><img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110650809.png\" alt=\"\"></p>\n<ol>\n<li><p>keys所在目录为<code>~/.ssh/</code>中，检查目标文件<code>id_rsa</code>, <code>id_rsa.pub</code>是否存在。<img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110828788.png\" alt=\"\"></p>\n</li>\n<li><p>若文件不存在，我们需要重新生成密钥。<br>在命令行中输入<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>，为了方便可以一路按回车，不需要输入其他内容，默认会在相应路径下（/your_home_path）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span></span><br><span class=\"line\"><span class=\"comment\"># Creates a new ssh key using the provided email</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/your_home_path/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将新生成的key添加到ssh-agent中:</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start the ssh-agent in the background</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">Agent pid 59566</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将ssh key添加到GitHub中:</p>\n<ul>\n<li><p>打开Github，点击右上角加号，选择Settings</p>\n<p>  <img src=\"http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605112652130.png\" alt=\"\"></p>\n</li>\n<li><p>选择左侧一列中<code>SSH and GPG keys</code>。</p>\n</li>\n<li>选择<code>New SSH key</code>。</li>\n<li>打开本地<code>~/.ssh/id_rsa.pub</code>文件将其中内容复制出来，粘贴到github页面key的输入框中。</li>\n<li>点击 add SSH Key完成添加</li>\n</ul>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><p>打开博客根目录下的<code>_config.yml</code>配置文件，找到deploy一栏，按照如下模板填写。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: 你github仓库的SSH链接</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: update my blog</span><br></pre></td></tr></table></figure>\n<h4 id=\"将博客部署到远程\"><a href=\"#将博客部署到远程\" class=\"headerlink\" title=\"将博客部署到远程\"></a>将博客部署到远程</h4><p>首先我们需要生成网页的静态文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>然后使用命令将生成的静态文件PUSH到github远程仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>等待完成后可以访问<code>你的用户名.github.io</code>来进入博客了。</p>\n<p>每次更新文章后都可以使用<code>hexo generate</code>生成静态文件，再<code>hexo deploy</code>将其push到github。</p>\n<div class=\"note info\"><p>后续会增加关于<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题</a>的配置</p></div>\n<a class=\"btn\" href=\"http://shadowless.top\" title=\"title\"><i class=\"fa fa-icon button\"></i>HOME</a>"}],"PostAsset":[],"PostCategory":[{"post_id":"cji7duumc0003s70uaq3s6pnw","category_id":"cji7duumi0006s70uqqh63lpq","_id":"cji7duumn000bs70u759jii73"},{"post_id":"cji7duumg0005s70u7u06qk4h","category_id":"cji7duumm0008s70u6rc2a3rc","_id":"cji7duumo000ds70u9lo55au7"},{"post_id":"cji7duum40001s70up4vqmhme","category_id":"cji7f7y9t000is70u1ve6t8j7","_id":"cji7lmu5i001ps70ukavrj0d9"}],"PostTag":[{"post_id":"cji7duumc0003s70uaq3s6pnw","tag_id":"cji7duuml0007s70u0lhd1c40","_id":"cji7duumn000as70uxjays3jm"},{"post_id":"cji7duumg0005s70u7u06qk4h","tag_id":"cji7duumm0009s70ubu8kefve","_id":"cji7duumo000cs70u9c6mw8p8"},{"post_id":"cji7duum40001s70up4vqmhme","tag_id":"cji7f7mur000es70ullhzfgnh","_id":"cji7lmu5h001ns70uom9hqu2f"},{"post_id":"cji7duum40001s70up4vqmhme","tag_id":"cji7f7mus000fs70ukpf5lcd3","_id":"cji7lmu5h001os70uxw281fvi"}],"Tag":[{"name":"other","_id":"cji7duuml0007s70u0lhd1c40"},{"name":"hexo","_id":"cji7duumm0009s70ubu8kefve"},{"name":"python","_id":"cji7f7mur000es70ullhzfgnh"},{"name":"linux","_id":"cji7f7mus000fs70ukpf5lcd3"}]}}