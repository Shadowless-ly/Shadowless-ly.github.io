<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadowless</title>
  
  <subtitle>备忘录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shadowless.top/"/>
  <updated>2018-06-09T16:18:26.271Z</updated>
  <id>http://shadowless.top/</id>
  
  <author>
    <name>Shadowless</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python使用sys.stdin与fileinput获取标准输入</title>
    <link href="http://shadowless.top/python/python%E4%BD%BF%E7%94%A8sys-stdin%E4%B8%8Efileinput%E8%8E%B7%E5%8F%96%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5/"/>
    <id>http://shadowless.top/python/python使用sys-stdin与fileinput获取标准输入/</id>
    <published>2018-06-08T11:15:14.000Z</published>
    <updated>2018-06-09T16:18:26.271Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。</p></blockquote><h1 id="stdin"><a href="#stdin" class="headerlink" title="stdin"></a>stdin</h1><p>Python的标准库<code>sys</code>提供了三个文件描述符:</p><table><thead><tr><th style="text-align:center">标准输入</th><th style="text-align:center">标准输出</th><th style="text-align:center">错误输出</th></tr></thead><tbody><tr><td style="text-align:center">stdin</td><td style="text-align:center">stdout</td><td style="text-align:center">stderr</td></tr></tbody></table><p>以下例子是获取标准输入，然后写入到标准输入。<br><figure class="highlight python"><figcaption><span>read_stdin.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure></p><p>接下来我们可以在命令行使用该脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | python read_stdin.py</span><br><span class="line">$ python read_stdin.py &lt; /etc/passwd</span><br><span class="line">$ python read_stdin.py -</span><br></pre></td></tr></table></figure></p><p><code>sys.stdin</code>为文件描述符，故拥有文件对象的方法，我们可以使用<code>read()</code>方法读取标准输入的所有内容，或者使用<code>readlines()</code>将标准输入内容读取到一个<code>list</code>中。</p><figure class="highlight python"><figcaption><span>upper.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_upper_list</span><span class="params">()</span>:</span></span><br><span class="line">    content_list =  sys.stdin.readlines()</span><br><span class="line">    <span class="keyword">return</span> [i.upper() <span class="keyword">for</span> i <span class="keyword">in</span> content_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> get_upper_list():</span><br><span class="line">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure><p>上述脚本中定义了<code>get_content()</code>函数，该函数使用<code>sys.stdin</code>标准输入的<code>readlines()</code>方法读取所有行，以列表类型保存于<code>content_list</code>，使用列表解析，调用每个元素(字符串类型)的<code>upper()</code>方法，构造一个新的列表并返回。<br>迭代<code>get_upper_list()</code>函数返回的新列表，将每一行写入标准输入。</p><p>该脚本运行效果如下：<br><img src="http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609095401158.png" alt=""></p><p>利用<code>sys.stdin</code>，我们几乎可以不再使用<code>awk</code>。将Python与Linux管道结合，可以充分发挥Python语言的文字处理能力。</p><h1 id="fileinput"><a href="#fileinput" class="headerlink" title="fileinput"></a>fileinput</h1><p>对于<code>awk</code>，它可以同时处理多个文件，在Python中我们可以使用<code>fileinput</code>这个标准库来达到同样效果。<br><code>fileinput</code>比<code>sys.stdin</code>更为通用，它可以遍历<code>sys.argv[1:]</code>列表(所有命令行参数)中的文件，如果该列表为空(没有提供文件名参数)，则默认读取标准输入的内容。</p><figure class="highlight python"><figcaption><span>read_from_fileinput.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>上述脚本直接调用了fileinput模块的input函数，该函数返回一个FileInput实例化的可迭代对象，可以使用for循环遍历取得每一行内容。fileinput既可以从标准输入读取数据，也可以从文件中(一个或多个)读取数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python read_from_fileinput.py -  <span class="comment"># 从标准输入读取数据</span></span><br><span class="line">$ cat /etc/passwd | python read_from_fileinput.py  <span class="comment"># 通过管道读取passwd数据</span></span><br><span class="line">$ python read_from_fileinput.py &lt; /etc/passwd  <span class="comment"># 通过重定向读取passwd数据</span></span><br><span class="line">$ python read_from_fileinput.py /etc/passwd  <span class="comment"># 直接读取passwd文件数据</span></span><br><span class="line">$ python read_from_fileinput.py /etc/passwd /etc/hosts  <span class="comment"># 直接读取passwd与hosts文件数据</span></span><br></pre></td></tr></table></figure></p><p>fileinput还提供了一些方法让我们知道当前读取的内容属于哪一个文件等便利的方法，常用方法如下：</p><ul><li><code>filename</code>: 当前正在读取文件的文件名 str</li><li><code>fileno</code>: 文件的描述符 int</li><li><code>filelineno</code>: 正在读取的行时当前文件的第几行 int</li><li><code>isfirstline</code>: 正在读取的行是否是当前文件的第一行 bool</li><li><code>isstdin</code>: 正在读的问价是否时从标准输入读取的 bool</li><li><code>nextfile</code>: 关闭当前正在读取的文件，从下一个文件第一行开始 None</li></ul><p>我们可以完成一个简单的脚本来展示一下fileinput的各个方法：</p><figure class="highlight python"><figcaption><span>read_file.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    meta = [<span class="string">"文件名:"</span> + str(fileinput.filename()),</span><br><span class="line">    <span class="string">" 文件描述符:"</span> + str(fileinput.fileno()),</span><br><span class="line">    <span class="string">" 行号:"</span> + str(fileinput.filelineno()),</span><br><span class="line">    <span class="string">" 首行:"</span> + str(fileinput.isfirstline()),</span><br><span class="line">    <span class="string">" 标准输入:"</span> + str(fileinput.isstdin()) + <span class="string">" "</span>]</span><br><span class="line">    meta_ljust = [i.ljust(<span class="number">9</span>) <span class="keyword">for</span> i <span class="keyword">in</span> meta]</span><br><span class="line">    print(*meta_ljust, end=<span class="string">""</span>)</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p><img src="http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180609114727921.png" alt=""></p><p>同时fileinput还提供了钩子函数，可以帮助去自定义文件访问的方式：<br>fileinput内置了两个函数：<br><code>hook_compressed</code>: 识别并打开<code>.gz</code>和<code>.bz2</code>的压缩文件<br><code>hook_encoded</code>: 以特定的编码格式打开文件</p><p>读取一个<code>.gz</code>压缩文件，如下所示：<br><figure class="highlight python"><figcaption><span>read_compressed.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(openhook=fileinput.hook_compressed):</span><br><span class="line">    print(line.decode(<span class="string">'utf-8'</span>), end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></p><p><img src="http://p9lal5uqx.bkt.clouddn.com/python使用sys-stdin与fileinput获取标准输入/20180610121207368.png" alt=""></p><p>在中文windows下有读取utf-8,或在linux下读取gbk需要指定对应的编码格式，如下所示：</p><figure class="highlight python"><figcaption><span>read_encoded.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(openhook=fileinput.hook_encoded(encoding=<span class="string">"gbk"</span>)):</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Shell脚本可以直接利用管道衔接不同的Linux命令，通过管道可以使用多个简单的命令实现复杂的功能。在Python中也希望可以利用管道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;stdin&quot;&gt;&lt;a href=&quot;#stdin&quot; clas
      
    
    </summary>
    
      <category term="python" scheme="http://shadowless.top/categories/python/"/>
    
    
      <category term="python" scheme="http://shadowless.top/tags/python/"/>
    
      <category term="linux" scheme="http://shadowless.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo与Gitpages搭建博客</title>
    <link href="http://shadowless.top/hexo/%E4%BD%BF%E7%94%A8Hexo%E4%B8%8EGitpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://shadowless.top/hexo/使用Hexo与Gitpages搭建博客/</id>
    <published>2018-06-03T14:02:48.000Z</published>
    <updated>2018-06-05T16:56:20.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo与Gitpages搭建博客"><a href="#使用Hexo与Gitpages搭建博客" class="headerlink" title="使用Hexo与Gitpages搭建博客"></a>使用Hexo与Gitpages搭建博客</h1><p>一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。</p><p>各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。</p><h2 id="搭建本地Hexo运行环境"><a href="#搭建本地Hexo运行环境" class="headerlink" title="搭建本地Hexo运行环境"></a>搭建本地Hexo运行环境</h2><p>我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。</p><h3 id="了解Hexo"><a href="#了解Hexo" class="headerlink" title="了解Hexo"></a>了解Hexo</h3><blockquote><p>Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。</p></blockquote><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==" title="Hexo官网"><i class="fa fa-external-link"></i> Hexo</span><h3 id="Git版本管理工具安装"><a href="#Git版本管理工具安装" class="headerlink" title="Git版本管理工具安装"></a>Git版本管理工具安装</h3><p>Git是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。</p><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" title="下载git" target="_blank" rel="noopener">git</a>。</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>；或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><div class="note warning"><p><strong> Windows用户　</strong><br>由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。<br>或者可以参考这里<a href="https://github.com/waylau/git-for-win" title="git for windows下载" target="_blank" rel="noopener">Git for Windows 国内下载站</a>。</p></div><p>如果想学习Git的使用，推荐一下廖老师的教程　<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDA=" title="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000"><i class="fa fa-external-link"></i> 廖雪峰的官方网站</span></p><h3 id="Node-js环境搭建"><a href="#Node-js环境搭建" class="headerlink" title="Node.js环境搭建"></a>Node.js环境搭建</h3><p>由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。</p><h4 id="了解Node-js"><a href="#了解Node-js" class="headerlink" title="了解Node.js"></a>了解Node.js</h4><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p></blockquote><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi8=" title="Node.js官网"><i class="fa fa-external-link"></i> Node</span><a id="more"></a><h4 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h4><p>使用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>来安装Node.js<br><div class="tabs" id="node.js"><ul class="nav-tabs"><li class="tab active"><a href="#node.js-1"><i class="fa fa-download" "=""></i>cURL</a></li><li class="tab"><a href="#node.js-2"><i class="fa fa-download" "=""></i>Wget</a></li></ul><div class="tab-content"><div class="tab-pane active" id="node.js-1"><p>使用curl安装<br><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p></div><div class="tab-pane" id="node.js-2"><p>使用Wget安装<br><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p></div></div></div></p><p>安装完成后重启终端，执行以下命令安装Node.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure></p><div class="note info"><p>也可以直接下载<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装程序</a>执行安装</p></div><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>使用Node.js的包管理工具npm安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装完成后，可以在命令行终端试一下hexo是否可以使用<br><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180604111622738.png" alt="hexo"></p><p>若不能使用，可以检查以下几方面：</p><ul><li>npm install过程是否有异常</li><li>检查环境变量是否正常，安装时会在/usr/bin/中创建hexo可执行程序的软链接</li><li>若链接不存在，检查/usr/lib/node_modules/hexo/bin/hexo是否存在，手工在/usr/bin/下创建链接<code>ln -s /usr/lib/node_modules/hexo/bin/hexo /usr/bin/hexo</code></li></ul><h3 id="使用Hexo建站"><a href="#使用Hexo建站" class="headerlink" title="使用Hexo建站"></a>使用Hexo建站</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>使用如下命令，hexo可以在一个指定文件夹(blog)中创建所需文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>完成后使用<code>tree blog</code>可以得到目录树如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml    # 网站的配置信息，您可以在此配置大部分的参数。</span><br><span class="line">├── package.json    # 应用程序的信息。</span><br><span class="line">├── scaffolds    # 模版文件夹。新建文章时，Hexo会根据 scaffold 来建立文件。</span><br><span class="line">├── source    # 资源文件夹是存放用户资源的地方</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes    # 主题文件夹。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure><h4 id="Hexo基本配置"><a href="#Hexo基本配置" class="headerlink" title="Hexo基本配置"></a>Hexo基本配置</h4><p>在blog目录下，_config.yml中为用户可以自定义的配置，我们可以从<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo官网</a>了解各个参数的意义。<br>下面列出我搭建时的修改项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Shadowless</span><br><span class="line">subtitle: 备忘录</span><br><span class="line">description: 求知若饥，虚心若愚</span><br><span class="line">keywords: blog</span><br><span class="line">author: Shadowless</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">网站标题</td></tr><tr><td style="text-align:left">subtitle</td><td style="text-align:left">网站副标题</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">网站描述</td></tr><tr><td style="text-align:left">author</td><td style="text-align:left">您的名字</td></tr><tr><td style="text-align:left">language</td><td style="text-align:left">网站使用的语言，如：zh-CN</td></tr><tr><td style="text-align:left">timezone</td><td style="text-align:left">网站时区。Hexo 默认使用您电脑的时区。如：Asia/Shanghai</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://shadowless.top</span><br><span class="line">root: /</span><br><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :category/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">url</td><td style="text-align:left">网址</td><td style="text-align:left">　</td></tr><tr><td style="text-align:left">root</td><td style="text-align:left">网站根目录</td><td style="text-align:left">　</td></tr><tr><td style="text-align:left">permalink</td><td style="text-align:left">文章的永久链接格式</td><td style="text-align:left">:year/:month/:day/:title/</td></tr><tr><td style="text-align:left">permalink_defaults</td><td style="text-align:left">永久链接中各部分的默认值</td><td style="text-align:left">　</td></tr></tbody></table><p>以上参数自定义完成后可以执行<code>hexo g</code>生成静态页面<br><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605102944249.png" alt=""></p><p>然后输入命令<code>hexo s --debug</code>，以debug模式启动hexo的server模块</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103346674.png" alt=""></p><p>待启动成功后可以使用浏览器输入本地回环地址<code>http://localhost:4000/</code> or <code>http://127.0.0.1:4000/</code>访问你所创建的博客页面。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605103708454.png" alt=""></p><p>以上基本配置已经完成，接下来我们来学习一下文章的创建，主题的配置，以及将本地搭建完成的博客部署到gitgub。</p><h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>我们可以使用 <code>hexo new post “文章名”</code>来新建一篇文章<br><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605104559869.png" alt=""><br>新建的内容会在<code>blog/source/_posts/</code>目录中，由你指定的文章名命名，后缀为<code>.md</code>。<br>我们可以直接使用markdown语法编写该文件。</p><h2 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h2><h3 id="Github账户与仓库配置"><a href="#Github账户与仓库配置" class="headerlink" title="Github账户与仓库配置"></a>Github账户与仓库配置</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>首先我们打开<a href="https://github.com/" target="_blank" rel="noopener">“全球最大同性交友网站gayhub”</a>，然后注册一个账户。</p><p>登录账户，在网页上方状态栏找到一个加号，点击New repository。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105321620.png" alt=""></p><p>接下来会让你填写仓库名称，这里需要填写的格式为：<code>用户名.github.io</code>。<br>如图所示，设置为public仓库，可以不用README初始化仓库，也可以不添加.gitignore和license。<br>然后点击下方<code>Create repository</code>即可。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605105605162.png" alt=""></p><p>完成后我们会跳转至该仓库，在该页会有在本地添加远程仓库的指导以及HTTPS和SSH链接。</p><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110157400.png" alt=""></p><h4 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h4><p>我们选择使用ssh进行部署。需要生成一对ssh认证的密钥，然后将公钥添加到你的github账户。</p><p>分为如下步骤:</p><ul><li>检查SSH keys是否存在</li><li>生成新的ssh key</li><li>将ssh key添加到GitHub中</li></ul><p><img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110650809.png" alt=""></p><ol><li><p>keys所在目录为<code>~/.ssh/</code>中，检查目标文件<code>id_rsa</code>, <code>id_rsa.pub</code>是否存在。<img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605110828788.png" alt=""></p></li><li><p>若文件不存在，我们需要重新生成密钥。<br>在命令行中输入<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>，为了方便可以一路按回车，不需要输入其他内容，默认会在相应路径下（/your_home_path）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># Creates a new ssh key using the provided email</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/your_home_path/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></li><li><p>将新生成的key添加到ssh-agent中:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">Agent pid 59566</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ol><p>将ssh key添加到GitHub中:</p><ul><li><p>打开Github，点击右上角加号，选择Settings</p><p>  <img src="http://p9lal5uqx.bkt.clouddn.com/使用Hexo与Gitpages搭建博客/20180605112652130.png" alt=""></p></li><li><p>选择左侧一列中<code>SSH and GPG keys</code>。</p></li><li>选择<code>New SSH key</code>。</li><li>打开本地<code>~/.ssh/id_rsa.pub</code>文件将其中内容复制出来，粘贴到github页面key的输入框中。</li><li>点击 add SSH Key完成添加</li></ul><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开博客根目录下的<code>_config.yml</code>配置文件，找到deploy一栏，按照如下模板填写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你github仓库的SSH链接</span><br><span class="line">  branch: master</span><br><span class="line">  message: update my blog</span><br></pre></td></tr></table></figure><h4 id="将博客部署到远程"><a href="#将博客部署到远程" class="headerlink" title="将博客部署到远程"></a>将博客部署到远程</h4><p>首先我们需要生成网页的静态文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><p>然后使用命令将生成的静态文件PUSH到github远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>等待完成后可以访问<code>你的用户名.github.io</code>来进入博客了。</p><p>每次更新文章后都可以使用<code>hexo generate</code>生成静态文件，再<code>hexo deploy</code>将其push到github。</p><div class="note info"><p>后续会增加关于<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题</a>的配置</p></div><a class="btn" href="http://shadowless.top" title="title"><i class="fa fa-icon button"></i>HOME</a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Hexo与Gitpages搭建博客&quot;&gt;&lt;a href=&quot;#使用Hexo与Gitpages搭建博客&quot; class=&quot;headerlink&quot; title=&quot;使用Hexo与Gitpages搭建博客&quot;&gt;&lt;/a&gt;使用Hexo与Gitpages搭建博客&lt;/h1&gt;&lt;p&gt;一直使用为知笔记这款笔记软件来整理并记录自己学习的和感兴趣的东西。但是近段时间为知笔记的会员过期了，也不想每年花钱用这些笔记软件。忽然萌生出写博客这个想法。因为单纯想作为个人笔记使用，想要自己折腾折腾，所以不考虑使用博客园，CSDN这类的技术博客。经过一番搜索，调查，觉得用gitpages来托管静态页面这个方式还是挺适合的，不需要买云空间，而且也有现成的框架。&lt;/p&gt;
&lt;p&gt;各种度娘，谷歌，折腾了一番，这个Blog也差不多能用了，趁热打铁，整理一下搭建过程。&lt;/p&gt;
&lt;h2 id=&quot;搭建本地Hexo运行环境&quot;&gt;&lt;a href=&quot;#搭建本地Hexo运行环境&quot; class=&quot;headerlink&quot; title=&quot;搭建本地Hexo运行环境&quot;&gt;&lt;/a&gt;搭建本地Hexo运行环境&lt;/h2&gt;&lt;p&gt;我们需要先在本地搭建Hexo运行环境，安装Hexo并初始化我们的博客，然后进行一些配置修改，使其可以本地正常访问。&lt;/p&gt;
&lt;h3 id=&quot;了解Hexo&quot;&gt;&lt;a href=&quot;#了解Hexo&quot; class=&quot;headerlink&quot; title=&quot;了解Hexo&quot;&gt;&lt;/a&gt;了解Hexo&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==&quot; title=&quot;Hexo官网&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; Hexo&lt;/span&gt;
&lt;h3 id=&quot;Git版本管理工具安装&quot;&gt;&lt;a href=&quot;#Git版本管理工具安装&quot; class=&quot;headerlink&quot; title=&quot;Git版本管理工具安装&quot;&gt;&lt;/a&gt;Git版本管理工具安装&lt;/h3&gt;&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统。我们可以使用它对代码，文档等文件进行版本管理。在本次博客搭建过程中，它的主要作用是帮助我们从github远程仓库获取各种工具，以及将Hexo生成的静态页面同步到远程仓库。而且对Windows来说可以使用其minitty作为命令行的替代。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：下载并安装 &lt;a href=&quot;https://git-scm.com/download/win&quot; title=&quot;下载git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;Mac：使用 &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Homebrew&lt;/a&gt;, &lt;a href=&quot;http://www.macports.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MacPorts&lt;/a&gt; ：&lt;code&gt;brew install git&lt;/code&gt;；或下载 &lt;a href=&quot;http://sourceforge.net/projects/git-osx-installer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装程序&lt;/a&gt; 安装。&lt;/li&gt;
&lt;li&gt;Linux (Ubuntu, Debian)：&lt;code&gt;sudo apt-get install git-core&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux (Fedora, Red Hat, CentOS)：&lt;code&gt;sudo yum install git-core&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt; Windows用户　&lt;/strong&gt;&lt;br&gt;由于天朝众所周知的原因，下载git会非常缓慢，建议使用代理。&lt;br&gt;或者可以参考这里&lt;a href=&quot;https://github.com/waylau/git-for-win&quot; title=&quot;git for windows下载&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git for Windows 国内下载站&lt;/a&gt;。&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;如果想学习Git的使用，推荐一下廖老师的教程　&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDA=&quot; title=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; 廖雪峰的官方网站&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;Node-js环境搭建&quot;&gt;&lt;a href=&quot;#Node-js环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Node.js环境搭建&quot;&gt;&lt;/a&gt;Node.js环境搭建&lt;/h3&gt;&lt;p&gt;由于Hexo是基于Node.js，所以我们必须先准备好Node.js环境。&lt;/p&gt;
&lt;h4 id=&quot;了解Node-js&quot;&gt;&lt;a href=&quot;#了解Node-js&quot; class=&quot;headerlink&quot; title=&quot;了解Node.js&quot;&gt;&lt;/a&gt;了解Node.js&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。&lt;br&gt;Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;br&gt;Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL25vZGVqcy5jbi8=&quot; title=&quot;Node.js官网&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; Node&lt;/span&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://shadowless.top/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://shadowless.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://shadowless.top/other/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://shadowless.top/other/第一篇文章/</id>
    <published>2018-05-31T12:25:00.000Z</published>
    <updated>2018-06-05T16:28:05.536Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。</p><p>先记录一下搭建时参考的教程吧：<br>    1.首先时hexo的官方文档<br>    <code>https://hexo.io/zh-cn/docs/</code><br>    2.接下来时NexT主题的相关配置<br>    <code>https://www.jianshu.com/p/3ff20be8574c</code></p><p>后面我也会总结一下自己的搭建过程。</p><p><em>顺便测试一下图床</em><br><br><a href="http://portal.qiniu.com" target="_blank" rel="noopener"><em>七牛云</em></a><br><img src="http://p9lal5uqx.bkt.clouddn.com/blog/first_blog-2018-5-31.png" alt="blog/first_blog-2018-5-31.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;折腾了两个晚上，翻了几篇教程，终于将这个Blog搭起来了。想在这里记录一下自己的学习，工作，生活，就当是一个记事本啦。&lt;/p&gt;
&lt;p&gt;先记录一下搭建时参考的教程吧：&lt;br&gt;    1.首先时hexo的官方文档&lt;br&gt;    &lt;code&gt;https://hexo.io/zh-
      
    
    </summary>
    
      <category term="other" scheme="http://shadowless.top/categories/other/"/>
    
    
      <category term="other" scheme="http://shadowless.top/tags/other/"/>
    
  </entry>
  
</feed>
